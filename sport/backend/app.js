require('dotenv').config();
const fs = require('fs');
const connectDB = require('./db');
connectDB();

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const favicon = require('serve-favicon');

// ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå public ‡∏Ç‡∏≠‡∏á frontend (‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏±‡∏ö backend)
const PUBLIC_DIR = path.join(__dirname, 'public'); // ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô '..'

const axios = require('axios');
const mime = require('mime-types');

const multer = require('multer');
const storage = multer.memoryStorage();
const session = require('express-session');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
// Models
const Field = require('./models/field');
const User = require('./models/users');
const Equipment = require('./models/equipment');
const Cart = require('./models/cart');
const History = require('./models/history');
const Announcement = require('./models/announcement');
const BookingEquipment = require('./models/booking_equipment');
const ImgNews = require('./models/img_news');
const Information = require('./models/information');
const bcrypt = require('bcrypt');
const UploadFile = require('./models/upload_file');
const BookingField = require('./models/booking_field');
const app = express();
const Settings = require('./models/settings');

const uploadRoot = path.join(__dirname, 'uploads');
const newsDir = path.join(uploadRoot, 'news');
if (!fs.existsSync(newsDir)) fs.mkdirSync(newsDir, { recursive: true });

const sanitize = (name) => name.replace(/[^\w.-]/g, '_');

const storageNews = multer.diskStorage({
    destination: (req, file, cb) => cb(null, newsDir),
    filename: (req, file, cb) => {
        const ext = path.extname(file.originalname);
        const base = path.basename(file.originalname, ext);
        cb(null, `${Date.now()}_${sanitize(base)}${ext}`);
    }
});

const uploadNews = multer({
    storage: storageNews,
    limits: { fileSize: 10 * 1024 * 1024 }, // 10MB
    fileFilter: (req, file, cb) => {
        const ok = ['.png', '.jpg', '.jpeg', '.webp'].includes(path.extname(file.originalname).toLowerCase());
        cb(ok ? null : new Error('Only images are allowed'), ok);
    }
});




const jwt = require('jsonwebtoken');
const SECRET = process.env.JWT_SECRET || "YOUR_SUPER_SECRET";
// const nodemailer = require('nodemailer');
// const transporter = nodemailer.createTransport({
//     service: 'gmail',
//     auth: {
//         user: process.env.MAIL_USER,
//         pass: process.env.MAIL_PASS,
//     }
// });

const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: Number(process.env.SMTP_PORT || 25),
    secure: false,                   // ‡∏û‡∏≠‡∏£‡πå‡∏ï 587 = false
    requireTLS: true,                // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö STARTTLS
    auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
    },
    tls: {
        minVersion: 'TLSv1.2',        // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ server ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        // rejectUnauthorized: false,  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ cert ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô/‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    },
    connectionTimeout: 20000,
    greetingTimeout: 20000,
    socketTimeout: 30000,
});

// üëá ‡πÄ‡∏õ‡∏¥‡∏î log ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
transporter.set('logger', true);
transporter.set('debug', true);

// üëá ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û SMTP ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ï‡∏≠‡∏ô‡∏ö‡∏π‡∏ï
transporter.verify((err, success) => {
    if (err) {
        console.error('[SMTP VERIFY ERROR]');
        console.error('code:', err.code);
        console.error('command:', err.command);
        console.error('responseCode:', err.responseCode);
        console.error('response:', err.response && err.response.toString());
    } else {
        console.log('[SMTP READY]', success);
    }
});
app.get('/_mail/test', async (req, res) => {
    try {
        const info = await transporter.sendMail({
            from: `"MFU Sport Complex" <${process.env.MAIL_ENVELOPE_FROM || process.env.SMTP_USER}>`,
            to: process.env.REPLY_TO || process.env.SMTP_USER,
            subject: 'SMTP test from reserv-scc',
            text: 'This is a test email.',
            envelope: {
                from: process.env.MAIL_ENVELOPE_FROM || process.env.SMTP_USER,
                to: process.env.REPLY_TO || process.env.SMTP_USER,
            },
        });
        res.json({ ok: true, messageId: info.messageId });
    } catch (e) {
        res.status(500).json({
            ok: false,
            name: e.name,
            code: e.code,
            command: e.command,
            responseCode: e.responseCode,
            response: e.response && e.response.toString(),
            message: e.message,
        });
    }
});

// === Date format helpers (dd/mm/yyyy) ===
const pad2 = (n) => String(n).padStart(2, '0');
const toDate = (v) => (v instanceof Date ? v : new Date(v));
function formatDate(v) {
    if (!v) return '-';
    const d = toDate(v);
    if (isNaN(d)) return '-';
    return `${pad2(d.getDate())}/${pad2(d.getMonth() + 1)}/${d.getFullYear()}`;
}
function formatDateRange(since, uptodate) {
    return `${formatDate(since)}-${formatDate(uptodate)}`;
}

const returnsDir = path.join(__dirname, 'uploads', 'returns');
fs.mkdirSync(returnsDir, { recursive: true });

const uploadReturn = multer({ storage: multer.memoryStorage() });

const uploadDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
async function sendApproveEmail({ to, name, equipment, quantity }) {
    if (!to) return;
    const html = `
    <div>
      <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</h2>
      <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°:</b> ${name || '-'}</p>
      <p><b>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</b> ${equipment || '-'}</p>
      <p><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</b> ${quantity || '-'}</p>
      <br>
      <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏°‡πà‡∏ü‡πâ‡∏≤‡∏´‡∏•‡∏ß‡∏á</p>
      <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
    </div>`;
    try {
        return await sendBulk(to, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', html);
    } catch (err) { console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err); }
}

// ‚òÖ ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• staff/admin/super
async function getStaffEmails() {
    const staff = await User.find({ role: 'staff', email: { $exists: true, $ne: "" } });
    return staff.map(s => s.email);
}
async function getAdminEmails() {
    const admins = await User.find({ role: 'admin', email: { $exists: true, $ne: "" } });
    return admins.map(s => s.email);
}
async function getSuperEmails() {
    const supers = await User.find({ role: 'super', email: { $exists: true, $ne: "" } });
    return supers.map(s => s.email);
}

// ‚òÖ ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô + ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô HTML
// ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å ENV ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á MAIL_FROM ‡∏à‡∏∞ default = ‡∏ä‡∏∑‡πà‡∏≠ + MAIL_USER)
const FROM_ADDR =
    process.env.MAIL_FROM && process.env.MAIL_FROM.includes('<')
        ? process.env.MAIL_FROM
        : `"MFU Sport Complex" <${process.env.MAIL_FROM || process.env.SMTP_USER}>`;

const listToHtml = (items = []) =>
    `<ul>${(items || []).map(it => `<li>${it.name || '-'} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${it.quantity ?? '-'})</li>`).join('')}</ul>`;

async function sendBulk(toList, subject, html) {
    try {
        const to = Array.isArray(toList) ? [...new Set(toList.filter(Boolean))] : [toList];
        if (!to.length) return;

        await transporter.sendMail({
            from: FROM_ADDR,                             // ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô sport-complex@mfu.ac.th
            to,
            subject,
            html,
            replyTo: process.env.REPLY_TO || undefined,  // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà sport-complex@mfu.ac.th
            envelope: {
                from: process.env.MAIL_ENVELOPE_FROM || process.env.SMTP_USER,  // ‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô no-reply.cits@
                to,
            },
        });
    } catch (e) {
        console.error('[sendBulk mail error]');
        console.error('name:', e.name);
        console.error('code:', e.code);
        console.error('command:', e.command);
        console.error('responseCode:', e.responseCode);
        console.error('response:', e.response && e.response.toString());
        console.error('stack:', e.stack);
    }

}

// ‚òÖ ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å user_id (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ thaiName ‡πÉ‡∏ä‡πâ name/email)
async function getUserDisplayNameById(user_id) {
    try {
        const u = await User.findOne({ user_id });
        return u?.thaiName || u?.name || u?.email || user_id || '';
    } catch (_) { return user_id || ''; }
}

// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå "‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"
async function notifyAdminNewBorrow({ requester, items, booking_id }) {
    const adminEmails = await getAdminEmails();
    if (!adminEmails.length) return;
    let itemList = items.map(it => `<li>${it.name} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${it.quantity})</li>`).join("");
    const html = `
      <div>
        <h2>‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
        <p><b>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</b> ${requester}</p>
        <ul>${itemList}</ul>
        <p><b>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ</p>
        <p><b>https://reserv-scc.mfu.ac.th/</p>
        <hr>
        <p style="font-size: 0.95em; color: #888;">Sport Complex ‚Äì MFU</p>
      </div>
    `;
    await sendBulk(adminEmails, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏¢‡∏∑‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)', html);
}
// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô staff ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
async function notifyStaffNewBorrow({ requester, items, booking_id }) {
    const staffEmails = await getStaffEmails();
    if (!staffEmails.length) return;
    let itemList = items.map(it => `<li>${it.name} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${it.quantity})</li>`).join("");
    const html = `
      <div>
        <h2>‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
        <p><b>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</b> ${requester}</p>
        <ul>${itemList}</ul>
        <p><b>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ</p>
        <p><b>https://reserv-scc.mfu.ac.th/</p>
        <hr>
        <p style="font-size: 0.95em; color: #888;">Sport Complex ‚Äì MFU</p>
      </div>
    `;
    return await sendBulk(staffEmails, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)', html);
}
// Helper: ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô approve ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠ confirm ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
async function notifyApproverReturnPending({ approverId, userName, equipment, quantity, booking_id }) {
    if (!approverId) return;
    const staff = await User.findOne({ user_id: approverId });
    if (!staff || !staff.email) return;
    const html = `
        <div>
            <h2>‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì</h2>
            <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°:</b> ${userName || '-'}</p>
            <p><b>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</b> ${equipment || '-'}</p>
            <p><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</b> ${quantity || '-'}</p>
            <br>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏°‡πà‡∏ü‡πâ‡∏≤‡∏´‡∏•‡∏ß‡∏á</p>
            <hr>
            <p style="font-size: 0.95em; color: #888;">Sport Complex ‚Äì MFU</p>
        </div>
    `;
    return await sendBulk(staff.email, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô', html);
}
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á user ‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
async function sendDisapproveEquipmentEmail({ to, name, equipment, quantity }) {
    if (!to) return;
    const html = `
    <div>
      <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
      <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°:</b> ${name || '-'}</p>
      <p><b>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</b> ${equipment || '-'}</p>
      <p><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</b> ${quantity || '-'}</p>
      <br>
      <p>‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏°‡πà‡∏ü‡πâ‡∏≤‡∏´‡∏•‡∏ß‡∏á</p>
      <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
    </div>`;
    try {
        return await sendBulk(to, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', html);
    } catch (err) { console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á disapprove equipment ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err); }
}

// === ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö "‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß" ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö ===
async function sendApproveEquipmentEmailImmediate({ to, name, itemsHtml, fileUrl }) {
    if (!to) return;
    const html = `
    <div>
      <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</h2>
      <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°:</b> ${name || '-'}</p>
      ${itemsHtml || ''}
      <br>
      <p>‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏°‡πà‡∏ü‡πâ‡∏≤‡∏´‡∏•‡∏ß‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</p>
      <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
    </div>
  `;
    try {
        return await sendBulk(to, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)', html);
    } catch (err) {
        console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
    }
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á user ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á user ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (FIXED)
async function sendReturnSuccessEmail({ to, name, equipment, quantity, fileUrl,}) {
    if (!to) return;
    const html = `
    <div>
      <h2>‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
      <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô:</b> ${name || '-'}</p>
      <p><b>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</b> ${equipment || '-'}</p>
      <p><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</b> ${quantity || '-'}</p>
      ${fileUrl ? `<p><b>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô:</b> <a href="${fileUrl}" target="_blank" rel="noopener">‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå</a></p>` : ''}
      <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏°‡πà‡∏ü‡πâ‡∏≤‡∏´‡∏•‡∏ß‡∏á</p>
      <hr>
      <p style="font-size: 0.95em; color: #888;">Sport Complex ‚Äì MFU</p>
    </div>
  `;
    try {
        return await sendBulk(to, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', html);
    } catch (err) {
        console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
    }
}

async function notifyAdminNewFieldBooking({ requester, building, activity, since, uptodate, zone, booking_id }) {
    const adminEmails = await getAdminEmails();
    if (!adminEmails.length) return;
    const html = `
  <div>
    <h2>‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏° ‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤</h2>
    <p><b>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</b> ${requester || '-'}</p>
    <p><b>‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£/‡∏™‡∏ô‡∏≤‡∏°:</b> ${building || '-'}</p>
    <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${activity || '-'}</p>
    <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${formatDateRange(since, uptodate)}</p>
    <p><b>‡πÇ‡∏ã‡∏ô:</b> ${zone || '-'}</p>
    <p><b>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ</p>
    <p><b>https://reserv-scc.mfu.ac.th/</p>
    <hr>
    <p style="font-size: 0.95em; color: #888;">Sport Complex ‚Äì MFU</p>
  </div>
`;

    return await sendBulk(adminEmails, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°', html);
}
// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á user ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°
async function sendApproveFieldEmail({ to, name, field, activity, since, uptodate, startTime, endTime, fileUrl }) {
    if (!to) return;
    const html = `
  <div>
    <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
    <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</b> ${name || '-'}</p>
    <p><b>‡∏™‡∏ô‡∏≤‡∏°:</b> ${field || '-'}</p>
    <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${activity || '-'}</p>
    <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${formatDateRange(since, uptodate)}</p>
    <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${startTime || '-'} ‡∏ñ‡∏∂‡∏á ${endTime || '-'}</p>
    ${fileUrl ? `<p><b>‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:</b> <a href="${fileUrl}" target="_blank" rel="noopener">‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå</a></p>` : ''}
    <br>
    <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏°‡πà‡∏ü‡πâ‡∏≤‡∏´‡∏•‡∏ß‡∏á</p>
    <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
  </div>`;

    try {
        return await sendBulk(to, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', html);
    } catch (err) { console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á approve field ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err); }
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á user ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°
async function sendDisapproveFieldEmail({ to, name, field, activity, since, uptodate, startTime, endTime }) {
    if (!to) return;
    const html = `
  <div>
    <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
    <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</b> ${name || '-'}</p>
    <p><b>‡∏™‡∏ô‡∏≤‡∏°:</b> ${field || '-'}</p>
    <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${activity || '-'}</p>
    <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${formatDateRange(since, uptodate)}</p>
    <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${startTime || '-'} ‡∏ñ‡∏∂‡∏á ${endTime || '-'}</p>
    <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
  </div>`;

    try {
        return await sendBulk(to, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°', html);
    } catch (err) { console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á disapprove field ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err); }
}
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á user ‡∏ß‡πà‡∏≤ "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
async function sendCancelFieldEmail({ to, name, field, activity, since, uptodate, startTime, endTime, remark }) {
    if (!to) return;
    const html = `
  <div>
    <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</h2>
    <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</b> ${name || '-'}</p>
    <p><b>‡∏™‡∏ô‡∏≤‡∏°:</b> ${field || '-'}</p>
    <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${activity || '-'}</p>
    <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${formatDateRange(since, uptodate)}</p>
    <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${startTime || '-'} ‡∏ñ‡∏∂‡∏á ${endTime || '-'}</p>
    ${remark ? `<p style="margin-top:8px;"><b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${remark}</p>` : ''}
    <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
  </div>`;

    try {
        return await sendBulk(to, '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', html);
    } catch (err) { console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á cancel field ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err); }
}

async function saveGoogleProfilePic(picUrl, userId) {
    try {
        const response = await axios.get(picUrl, { responseType: 'arraybuffer' });
        const imgPath = path.join(__dirname, 'uploads', `profile-${userId}.jpg`);
        fs.writeFileSync(imgPath, response.data);
        // Return url ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend
        return `/uploads/profile-${userId}.jpg`;
    } catch (e) {
        console.error('Download google profile error:', e.message);
        return null;
    }
}

// STEPPER
// role ‡∏ä‡∏∏‡∏î fallback
const FALLBACK_ROLE_SETS = {
    field: ['admin', 'super'],
    equipment: ['admin', 'staff'], // multi-day ‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ
};

const toArr = (v) => Array.isArray(v) ? v : (v ? [v] : []);

function isEmptyLike(v) {
    const s = (v ?? '').toString().trim().toLowerCase();
    return !s || s === 'null' || s === 'undefined';
}
function isEquipmentOneDay(ctx = {}) {
    const t = String(ctx.type || 'equipment').toLowerCase();
    if (t !== 'equipment') return false;
    return isEmptyLike(ctx.since) && isEmptyLike(ctx.uptodate);
}

function clampOneDayStaffOnly(step, ctx) {
    const arr = Array.isArray(step) ? step : [];
    if (String(ctx?.type || '').toLowerCase() !== 'equipment') return arr;
    if (!isEquipmentOneDay(ctx)) return arr;
    const keep = arr.filter(s => String(s?.role || '').toLowerCase() === 'staff');
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ staff ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÑ‡∏ß‡πâ 1 ‡πÅ‡∏ñ‡∏ß
    return keep.length ? keep : [{ role: 'staff', approve: null }];
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‚Äù ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á since ‡πÅ‡∏•‡∏∞ uptodate ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á)
function isMultiDayEquipment(type, since, uptodate) {
    const t = String(type || '').toLowerCase();
    if (t !== 'equipment') return false;
    const s = String(since || '').trim();
    const u = String(uptodate || '').trim();
    return !!(s && u);
}

// ‡∏î‡∏∂‡∏á‡∏ä‡∏∏‡∏î role ‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î + ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß/‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)
function getRequiredRolesFor(type, ctx) {
    const t = String(type || 'field').toLowerCase();
    if (t === 'equipment' && isEquipmentOneDay(ctx)) return ['staff']; // ‚Üê ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö

    if (History.ROLE_SETS && History.ROLE_SETS[t]) return History.ROLE_SETS[t];
    if (Array.isArray(History.ALLOWED_STEP_ROLES)) return History.ALLOWED_STEP_ROLES;
    const FALLBACK_ROLE_SETS = { field: ['admin', 'super'], equipment: ['admin', 'staff'] };
    return FALLBACK_ROLE_SETS[t] || ['admin'];
}

// ===== ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å step (‡πÉ‡∏ä‡πâ approve) ‚Äî ‡∏≠‡∏¥‡∏á type + hasPeriod =====
function deriveStatusFromStep(stepArray, type, ctx) {
    const t = String(type || 'field').toLowerCase();
    const steps = Array.isArray(stepArray) ? stepArray : [];

    // ‡πÉ‡∏Ñ‡∏£‡∏Å‡∏î‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ -> disapproved
    if (steps.some(s => s?.approve === false)) return 'disapproved';

    const map = new Map(steps.map(s => [String(s.role).toLowerCase(), s.approve]));

    if (t === 'equipment') {
        // ‚úÖ one-day: ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á pending ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà flow ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö/‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô
        if (isEquipmentOneDay(ctx)) return 'pending';

        // multi-day: admin ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πá approved
        if (map.get('admin') === true) return 'approved';
        return 'pending';
    }

    // field: ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å role ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const reqRoles = getRequiredRolesFor(t, ctx);
    const allApproved = reqRoles.every(r => map.get(r) === true);
    return allApproved ? 'approved' : 'pending';
}

// ===== ‡πÅ‡∏õ‡∏•‡∏á step ‡∏à‡∏≤‡∏Å FE ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô + ‡πÄ‡∏ï‡∏¥‡∏° role ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î ‚Äî ‡∏≠‡∏¥‡∏á type + hasPeriod =====
function normalizeIncomingStep(stepArray, type, ctx) {
    const t = String(type || 'field').toLowerCase();

    // ‚õî ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ one-day equipment ‚Üí staff ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    if (t === 'equipment' && isEquipmentOneDay(ctx)) {
        return [{ role: 'staff', approve: null }];
    }

    // (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°) ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ helper ‡∏ö‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (typeof History.normalizeStepForType === 'function') {
        return History.normalizeStepForType(t, stepArray);
    }
    if (typeof History.withDefaultStep === 'function') {
        return History.withDefaultStep(stepArray);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏° role ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const reqRoles = getRequiredRolesFor(type, ctx);
    const map = new Map();

    if (Array.isArray(stepArray)) {
        for (const s of stepArray) {
            const role = String(s?.role || '').toLowerCase().trim();
            if (!reqRoles.includes(role)) continue;      // ‡∏ï‡∏±‡∏î role ‡πÄ‡∏Å‡∏¥‡∏ô (‡πÄ‡∏ä‡πà‡∏ô admin ‡πÉ‡∏ô one-day)
            const approve = (typeof s?.approve === 'boolean')
                ? s.approve
                : (typeof s?.action === 'boolean' ? s.action : null);
            map.set(role, { role, approve });
        }
    }
    for (const r of reqRoles) {
        if (!map.has(r)) map.set(r, { role: r, approve: null });
    }
    return Array.from(map.values());
}

function getRequiredRolesForDoc(doc) {
    return getRequiredRolesFor(doc.type, doc);
}

// ===== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏Ç‡∏≠‡∏á role ‡∏´‡∏ô‡∏∂‡πà‡∏á (approve true/false) ‚Äî ‡∏î‡∏π type + ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß/‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô =====
async function updateHistoryStep(
    { id, role, approve, action, actorName = '', remark = '' },
    { syncStatus = true } = {}
) {
    const h = await History.findById(id);
    if (!h) throw new Error('History not found');

    const r = String(role || '').toLowerCase().trim();

    // ‡∏ï‡∏£‡∏ß‡∏à role ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î/‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    const reqRoles = getRequiredRolesForDoc(h);
    if (!reqRoles.includes(r)) throw new Error('Invalid role');

    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ step ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    let step = normalizeIncomingStep(h.step, h.type, h);
    const effApprove = (typeof approve === 'boolean') ? approve
        : (typeof action === 'boolean') ? action : null;

    const idx = step.findIndex(s => String(s.role || '').toLowerCase() === r);
    if (idx >= 0) step[idx].approve = effApprove;
    else step.push({ role: r, approve: effApprove });

    // ‚õî ‡πÄ‡∏Ñ‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå "‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß": ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏∏‡∏Å role ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ staff ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    step = clampOneDayStaffOnly(step, h);
    h.step = step;

    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (String(h.type).toLowerCase() === 'equipment') {
        if (!isEquipmentOneDay(h)) {
            if (r === 'admin' && effApprove === true) h.status = 'approved';
            if (effApprove === false) h.status = 'disapproved';
        }
        // ‡∏ñ‡πâ‡∏≤ one-day: ‡πÑ‡∏°‡πà‡∏î‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ route ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏ã‡πá‡∏ï (‡πÄ‡∏ä‡πà‡∏ô approve_equipment)
    } else if (syncStatus) {
        h.status = deriveStatusFromStep(step, h.type, h);
    }

    await h.save();
    return h;
}


// ====== Return photo upload (unchanged) ======
const returnsStorage = multer.diskStorage({
    destination: (req, file, cb) => {
        const dir = path.join(__dirname, '../public/uploads/return-photos');
        fs.mkdirSync(dir, { recursive: true });
        cb(null, dir);
    },
    filename: (req, file, cb) => {
        const id = req.params.id || 'unknown';
        const ts = Date.now();
        const ext = (path.extname(file.originalname || '') || '.jpg').toLowerCase();
        cb(null, `return_${id}_${ts}${ext}`);
    }
});
const uploadReturnPhoto = multer({ storage: returnsStorage }).single('returnPhoto');

function buildPublicUrl(req, relPath) {
    const base = `${req.protocol}://${req.get('host')}`;
    return relPath.startsWith('/') ? `${base}${relPath}` : `${base}/${relPath}`;
}

// ============ Multer + Static Uploads (upload file to ./uploads) ==========
// app.use('/uploads', express.static(path.join(__dirname, 'uploads'), {
//     setHeaders: (res, filePath) => {
//         // ‡∏ö‡∏≠‡∏Å favicon ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PNG ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
//         res.setHeader('Link', '</img/435-4359797_mae-fah-luang-university-logo-mae-fah-luang-removebg-preview.png>; rel="icon"; type="image/png"');

//         if (filePath.endsWith('.pdf')) {
//             res.setHeader('Content-Type', 'application/pdf');
//             res.setHeader('X-Content-Type-Options', 'nosniff');
//             res.setHeader('Accept-Ranges', 'bytes');
//         }
//     }
// }));



app.set('trust proxy', 1);
const allowedOrigins = [
    'http://localhost:5173',
    'http://localhost:8010',
    'http://localhost:3000',
    'https://reserv-scc.mfu.ac.th',
    'https://reserv-scc.mfu.ac.th/',
    'http://reserv-scc.mfu.ac.th:8010',    // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    'https://reserv-scc.mfu.ac.th:8010'    // <--- ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ
];
const uploadsCors = cors({
    origin: function (origin, cb) {
        if (!origin) return cb(null, true);                      // e.g. direct open
        return allowedOrigins.includes(origin) ? cb(null, true)  // ‡πÉ‡∏ä‡πâ allowedOrigins ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            : cb(new Error('CORS'), false);
    },
    credentials: true,
    exposedHeaders: ['Content-Disposition'] // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢
});

// ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏™‡πà Access-Control-Allow-Origin:* ‡πÄ‡∏≠‡∏á‡πÉ‡∏ô setHeaders
app.use(
    '/uploads',
    uploadsCors,
    (req, res, next) => { res.setHeader('Vary', 'Origin'); next(); },
    express.static(path.join(__dirname, 'uploads'), {
        setHeaders: (res, filePath) => {
            // ‡πÄ‡∏Æ‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF/‡πÑ‡∏ü‡∏•‡πå
            if (filePath.endsWith('.pdf')) {
                res.setHeader('Content-Type', 'application/pdf');
                res.setHeader('X-Content-Type-Options', 'nosniff');
                res.setHeader('Accept-Ranges', 'bytes');
            }
            res.setHeader('Cache-Control', 'public, max-age=31536000, immutable');
        }
    })
);

app.use(cors({
    origin: function (origin, callback) {
        // allow requests with no origin (like mobile apps, curl, postman)
        if (!origin) return callback(null, true);
        if (allowedOrigins.indexOf(origin) === -1) {
            var msg = 'The CORS policy for this site does not allow access from the specified Origin.';
            return callback(new Error(msg), false);
        }
        return callback(null, true);
    },
    credentials: true
}));
app.use(express.json({ limit: '110mb' }));
app.use(express.urlencoded({ limit: '110mb', extended: true }));

//login oauth
app.use(session({
    secret: process.env.SESSION_SECRET || 'YOUR_SECRET',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: process.env.NODE_ENV === 'production',      // true ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ prod (https)
        sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax', // none ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ prod
        httpOnly: true,
        path: '/',
        domain: process.env.NODE_ENV === 'production' ? '.mfu.ac.th' : undefined // ‡πÉ‡∏™‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á domain ‡∏à‡∏£‡∏¥‡∏á
    }
}));
app.use(passport.initialize());
app.use(passport.session());

passport.serializeUser((user, done) => done(null, user.user_id));  // ‡∏´‡∏£‡∏∑‡∏≠ user._id ‡∏ñ‡πâ‡∏≤ MongoDB
passport.deserializeUser(async (id, done) => {
    try {
        // ‡∏´‡∏≤ user ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å database (‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ user_id)
        const user = await User.findOne({ user_id: id });
        done(null, user);
    } catch (err) {
        done(err);
    }
});
// ‡∏™‡∏£‡πâ‡∏≤‡∏á user_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏î‡πÄ‡∏°‡∏ô @mfu.ac.th ‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ß <= 10 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
async function generateUniqueMfuUserId(originalIdLike) {
    const MAX = 10;
    let base = String(originalIdLike || '').trim();
    if (!base) base = String(Date.now());
    base = base.slice(0, MAX); // ‡∏ï‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡πâ <= 10

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏ô ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    if (!(await User.exists({ user_id: base }))) return base;

    // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô: ‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏•‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏° suffix ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 9 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç/‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ 1 ‡∏ï‡∏±‡∏ß
    let core = base.slice(0, MAX - 1);
    const candidates = [];
    for (let i = 0; i <= 9; i++) candidates.push(core + i);
    for (let c = 97; c <= 122; c++) candidates.push(core + String.fromCharCode(c)); // a-z

    for (const cand of candidates) {
        if (!(await User.exists({ user_id: cand }))) return cand;
    }

    // fallback ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 10 ‡∏ï‡∏±‡∏ß
    for (let i = 0; i < 50; i++) {
        const rand = Math.random().toString(36).slice(2, 2 + (MAX - core.length));
        const cand = (core + rand).slice(0, MAX);
        if (!(await User.exists({ user_id: cand }))) return cand;
    }

    // ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á‡πÜ
    return core.padEnd(MAX, '0');
}

passport.use(new GoogleStrategy(
    {
        clientID: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        callbackURL: process.env.GOOGLE_CALLBACK_URL,
    },
    async (accessToken, refreshToken, profile, done) => {
        try {
            const email = profile.emails?.[0]?.value || '';
            const domainOk = email.endsWith('@mfu.ac.th') || email.endsWith('@lamduan.mfu.ac.th');

            console.log("Google Email Login:", email);
            if (!domainOk) {
                console.log("Reject email:", email);
                return done(null, false, { message: '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏• @mfu.ac.th ‡∏´‡∏£‡∏∑‡∏≠ @lamduan.mfu.ac.th ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' });
            }

            const isLamduan = email.endsWith('@lamduan.mfu.ac.th');
            const isMfu = email.endsWith('@mfu.ac.th');

            // url ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Google
            const profilePicUrl = profile._json?.picture || '';

            // ‡∏´‡∏≤ user ‡∏ï‡∏≤‡∏° email ‡∏Å‡πà‡∏≠‡∏ô
            let user = await User.findOne({ email });

            // === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì user_id ‡∏ï‡∏≤‡∏°‡πÇ‡∏î‡πÄ‡∏°‡∏ô ===
            let desiredUserId = null;

            if (isLamduan) {
                // lamduan: ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤ @
                desiredUserId = email.split('@')[0];
            } else if (isMfu) {
                // mfu: ‚Äú‡πÄ‡∏ã‡∏ï‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‚Äù = ‡∏≠‡∏¥‡∏á profile.id ‡πÅ‡∏ï‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‚â§ 10 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
                // - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: **‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°** (‡∏Å‡∏±‡∏ô data ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
                // - ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤
                if (!user) {
                    desiredUserId = await generateUniqueMfuUserId(profile.id);
                }
            }

            // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ (‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¥‡∏á user_id ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ)
            // ‡∏ñ‡πâ‡∏≤ user ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏µ user_id ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
            const tmpUserIdForPic = desiredUserId || user?.user_id || profile.id || email.split('@')[0];
            let savedPicUrl = null;
            if (profilePicUrl) {
                savedPicUrl = await saveGoogleProfilePic(profilePicUrl, tmpUserIdForPic);
            }

            if (!user) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
                user = new User({
                    email,
                    name: profile.displayName,
                    user_id: desiredUserId || (isLamduan ? email.split('@')[0] : String(profile.id).slice(0, 10)),
                    role: 'user',
                    picture: savedPicUrl || profilePicUrl
                });

                // mfu: ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô (‡∏≠‡∏¢‡∏π‡πà‡∏î‡∏µ‡πÜ profile.id 10 ‡∏ï‡∏±‡∏ß‡∏ã‡πâ‡∏≥)
                if (isMfu) {
                    if (await User.exists({ user_id: user.user_id })) {
                        user.user_id = await generateUniqueMfuUserId(profile.id);
                    }
                }

                await user.save();
            } else {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÄ‡∏™‡∏°‡∏≠
                user.picture = savedPicUrl || profilePicUrl;

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user_id ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ lamduan ‡πÉ‡∏´‡πâ sync ‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ @ (‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ‡πÄ‡∏î‡∏¥‡∏°)
                if (isLamduan) {
                    const lamduanId = email.split('@')[0];
                    if (user.user_id !== lamduanId) {
                        user.user_id = lamduanId;
                    }
                }

                // mfu: **‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô user_id ‡πÄ‡∏î‡∏¥‡∏°** (‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ)
                await user.save();
            }

            return done(null, user);
        } catch (error) {
            console.error("Google OAuth error:", error);
            return done(error, null);
        }
    }
));

function requireLogin(req, res, next) {
    if (req.isAuthenticated && req.isAuthenticated()) return next();
    res.status(401).json({ success: false, message: 'Not logged in' });
}

function generateToken(user) {
    return jwt.sign({
        user_id: user.user_id,
        role: user.role // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ
    }, SECRET, { expiresIn: '2h' });
}

// Middleware ‡∏ï‡∏£‡∏ß‡∏à JWT
function authenticateJWT(req, res, next) {
    const authHeader = req.headers.authorization;
    if (!authHeader) return res.sendStatus(401);
    const token = authHeader.split(' ')[1];
    jwt.verify(token, SECRET, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
}

app.use('/api', (req, res, next) => {
    if (req.path === '/me') return next();
    requireLogin(req, res, next);
});

// ====== OAuth Routes ======
app.get('/auth/google',
    passport.authenticate('google', {
        scope: ['profile', 'email'],
        prompt: 'select_account'  // <<< ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Google ‡∏ñ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    })
);
app.post('/auth/login', async (req, res) => {
    // ... ‡∏ï‡∏£‡∏ß‡∏à user/pass ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÉ‡∏™‡πà logic ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
    if (!user || user.password !== password) {
        return res.status(401).json({ error: "Invalid login" });
    }
    const token = generateToken(user);
    res.json({ token }); // ‡∏™‡πà‡∏á JWT ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ frontend
});

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á protect route:
app.get('/api/protected', authenticateJWT, (req, res) => {
    res.json({ message: "You are authenticated!", user: req.user });
});

const FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:8010';
// =================== LOGOUT ===================
app.post('/api/logout', (req, res) => {
    req.logout(() => {
        req.session.destroy(() => {
            res.clearCookie('connect.sid');
            res.status(200).json({ success: true });
        });
    });
});

// Express Route (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô app.js)
app.get('/auth/logout', (req, res) => {
    req.logout(() => {
        req.session.destroy(() => {
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô wreply= ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô url ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô env
            const ssoLogoutUrl = `https://authsso.mfu.ac.th/adfs/ls/?wa=wsignout1.0&wreply=${encodeURIComponent(FRONTEND_URL + '/login?error=logout')}`;
            res.clearCookie('connect.sid');
            res.redirect(ssoLogoutUrl);
        });
    });
});

app.get('/auth/logout-google', (req, res) => {
    const next = encodeURIComponent(`${FRONTEND_URL}/login?error=logout`);
    res.redirect(
        `https://accounts.google.com/Logout?continue=https://appengine.google.com/_ah/logout?continue=${next}`
    );
});


app.get('/auth/google/callback',
    passport.authenticate('google', {
        failureRedirect: `${FRONTEND_URL}/login?error=not_mfu`,
        session: true
    }),
    (req, res) => {
        res.redirect(`${FRONTEND_URL}/login-success`);
    }
);

app.get('/api/me', (req, res) => {
    console.log("REQ USER:", req.user);
    try {
        if (req.user) {
            res.json({ loggedIn: true, user: req.user });
        } else {
            res.status(401).json({ loggedIn: false });
        }
    } catch (e) {
        console.error(e);
        res.status(500).send(e.message || "Unknown error");
    }
});

function calcTotalHours(since, uptodate, startTime, endTime) {
    if (!since || !uptodate || !startTime || !endTime) return 0;
    const sinceDate = new Date(since);
    const uptodateDate = new Date(uptodate);
    if (isNaN(sinceDate) || isNaN(uptodateDate)) return 0;
    const oneDay = 1000 * 60 * 60 * 24;
    const numDays = Math.floor((uptodateDate - sinceDate) / oneDay) + 1;
    const [startHour, startMin] = startTime.split(':').map(Number);
    const [endHour, endMin] = endTime.split(':').map(Number);
    let hourPerDay = ((endHour + endMin / 60) - (startHour + startMin / 60));
    if (hourPerDay < 0) hourPerDay = 0;
    return +(numDays * hourPerDay).toFixed(2);

}

const bookingFieldUpload = multer({
    storage: multer.diskStorage({
        destination: function (req, file, cb) {
            cb(null, './uploads/');
        },
        filename: function (req, file, cb) {
            const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
            cb(null, uniqueSuffix + path.extname(file.originalname));
        }
    }),
    limits: { fileSize: 10 * 1024 * 1024 }
});

// ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô): redirect ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ bookingPdfUrl
app.get('/api/history/pdfbyurl/:id', async (req, res) => {
    const doc = await History.findById(req.params.id).lean();
    if (!doc || !doc.bookingPdfUrl) return res.status(404).send('Not found');
    return res.redirect(doc.bookingPdfUrl);
});
// GET /api/history/booked?name=<building>&zone=<zone_optional>&from=YYYY-MM-DD&to=YYYY-MM-DD
app.get('/api/history/booked', async (req, res) => {
    try {
        const { name, zone, from, to } = req.query;
        if (!name) return res.status(400).json({ error: 'name (building) is required' });

        const fromDate = from ? new Date(from) : new Date();
        const toDate = to ? new Date(to) : new Date(Date.now() + 180 * 24 * 3600 * 1000); // default 180 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤

        // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà ‚Äú‡∏ã‡πâ‡∏≠‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‚Äù ‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ç‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending/approved
        const criteria = {
            type: 'field',
            name,
            status: { $in: ['pending', 'approved'] },
            since: { $lte: toDate },
            uptodate: { $gte: fromDate }
        };
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÇ‡∏ã‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô
        if (zone && zone !== '-' && zone !== '') criteria.zone = zone;

        const rows = await History.find(criteria)
            .select('since uptodate startTime endTime zone name')
            .lean();

        res.json(rows.map(r => ({
            since: new Date(r.since),
            uptodate: new Date(r.uptodate),
            startTime: r.startTime || '00:00',
            endTime: r.endTime || '23:59',
            zone: r.zone || ''
        })));
    } catch (e) {
        console.error(e);
        res.status(500).json({ error: 'server error' });
    }
});

// ‡πÉ‡∏ä‡πâ PNG ‡πÄ‡∏õ‡πá‡∏ô favicon ‡∏ï‡∏£‡∏á ‡πÜ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
// ‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡πÅ‡∏ó‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î favicon ‡πÄ‡∏î‡∏¥‡∏°
// ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå PNG ‡πÉ‡∏ô dist/img ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
app.use(favicon(path.join(PUBLIC_DIR, 'favicon.ico')));

// static ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
app.use(express.static(PUBLIC_DIR, { maxAge: '7d' })); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå public ‡∏ï‡∏£‡∏á‡πÜ



app.use('/uploads/signatures', express.static(path.join(__dirname, 'uploads', 'signatures')));

const upload = multer({
    storage: multer.diskStorage({
        destination: function (req, file, cb) {
            cb(null, uploadDir);               // ‡πÉ‡∏ä‡πâ absolute path
        },
        filename: function (req, file, cb) {
            const unique = Date.now() + '-' + Math.round(Math.random() * 1e9);
            cb(null, unique + path.extname(file.originalname));
        }
    }),
    fileFilter: function (req, file, cb) {
        const allowed = ['.png', '.jpg', '.jpeg', '.pdf', '.xls', '.xlsx', '.doc', '.docx'];
        return allowed.includes(path.extname(file.originalname).toLowerCase())
            ? cb(null, true)
            : cb(new Error('Unsupported file type'), false);
    }
});


// -------- Promote Admin/Super --------
// === signatures uploader (allow .gif) ===
const signaturesDir = path.join(uploadRoot, 'signatures');
if (!fs.existsSync(signaturesDir)) fs.mkdirSync(signaturesDir, { recursive: true });

const extFromMime = { 'image/png': '.png', 'image/jpeg': '.jpg', 'image/jpg': '.jpg', 'image/gif': '.gif' };

const signatureStorage = multer.diskStorage({
    destination: (req, file, cb) => cb(null, signaturesDir),
    filename: (req, file, cb) => {
        const ts = Date.now() + '-' + Math.round(Math.random() * 1e9);
        let ext = (path.extname(file.originalname || '') || '').toLowerCase();
        if (!ext) ext = extFromMime[file.mimetype] || '';
        cb(null, `${ts}${ext}`);
    }
});

const signatureUpload = multer({
    storage: signatureStorage,
    limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
    fileFilter: (req, file, cb) => {
        const ok = ['image/png', 'image/jpeg', 'image/jpg', 'image/gif'].includes(file.mimetype);
        cb(ok ? null : new Error('‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û png, jpg, jpeg, gif'), ok);
    }
});

app.post('/api/members/promote', signatureUpload.single('signature'), async (req, res) => {
    try {
        const { email, position, thaiName } = req.body || {};
        if (!email || !position || !['Admin', 'Super'].includes(position)) {
            return res.status(400).send({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠ role ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }
        const user = await User.findOne({ email });
        if (!user) return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡∏ô‡∏µ‡πâ' });

        user.role = position.toLowerCase();
        if (thaiName) user.thaiName = thaiName;
        if (req.file) user.signaturePath = `/uploads/signatures/${req.file.filename}`;

        await user.save();
        res.send({ success: true, data: user });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});

app.post('/api/members/update-privileged', signatureUpload.single('signature'), async (req, res) => {
    try {
        const { oldEmail, email, position, thaiName } = req.body || {};
        const user = await User.findOne({ email: oldEmail });
        if (!user) return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡πÄ‡∏î‡∏¥‡∏°' });

        if (email) user.email = email;
        if (position) user.role = position.toLowerCase();
        if (thaiName) user.thaiName = thaiName;
        if (req.file) user.signaturePath = `/uploads/signatures/${req.file.filename}`;

        await user.save();
        res.send({ success: true, data: user });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});





app.post('/api/upload', (req, res, next) => {
    upload.single('file')(req, res, function (err) {
        if (err) {
            console.error('[Multer Error /api/upload]:', err);
            return res.status(400).json({ success: false, message: err.message });
        }
        if (!req.file) {
            return res.status(400).json({ success: false, message: 'No file uploaded' });
        }
        const relPath = `/uploads/${req.file.filename}`;
        const fullUrl = `${req.protocol}://${req.get('host')}${relPath}`;
        // ‚úÖ ‡∏™‡πà‡∏á alias ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö ‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤/‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        return res.json({
            success: true,
            fileUrl: fullUrl,
            url: fullUrl,                 // FE ‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô up.data.url ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            path: relPath,
            filename: req.file.filename,
            mimetype: req.file.mimetype
        });
    });
});


app.post('/api/uploads', (req, res, next) => {
    upload.array('files', 20)(req, res, function (err) {
        if (err) {
            console.error('[Multer Error /api/uploads]:', err);
            return res.status(400).json({ success: false, message: err.message });
        }
        if (!req.files || req.files.length === 0) {
            return res.status(400).json({ success: false, message: 'No files uploaded' });
        }
        const baseUrl = `${req.protocol}://${req.get('host')}/uploads/`;
        const fileUrls = req.files.map(f => baseUrl + f.filename);
        return res.json({ success: true, fileUrls });
    });
});
// ==================== Health Check ====================
app.get('/', (req, res) => res.send('Backend is running!'));

// ==================== Register / Login ====================
app.post('/api/register', (req, res) => {
    res.send({ success: true, message: 'Register completed' });
});

app.post('/api/login', async (req, res) => {
    try {
        let { username, password } = req.body || {};
        if (!username || !password)
            return res.status(400).json({ success: false, message: 'Username/Password required' });

        username = String(username).trim();
        const user = await User.findOne({ username: { $regex: new RegExp('^' + username + '$', 'i') } });
        if (!user) return res.status(401).json({ success: false, message: 'Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(401).json({ success: false, message: 'Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

        const token = generateToken(user);
        res.json({ success: true, token, user_id: user.user_id, role: user.role, name: user.name });
    } catch (err) {
        res.status(500).json({ success: false, message: err.message });
    }
});


// ==================== User APIs ====================
app.get('/api/users', async (req, res) => {
    try {
        const users = await User.find();
        res.send(users);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.get('/api/users/:userId', async (req, res) => {
    try {
        const user = await User.findOne({ user_id: req.params.userId });
        if (!user) return res.status(404).send({ message: 'User not found' });
        res.send(user);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.get('/api/users/email/:email', async (req, res) => {
    try {
        const user = await User.findOne({ email: req.params.email });
        if (!user) return res.status(404).send({ message: 'User not found' });
        res.send(user);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
// PATCH /api/users/email/:email  (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô/‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢/‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô)
app.patch('/api/users/email/:email', async (req, res) => {
    try {
        const role = String(req.user?.role || '').toLowerCase();
        if (!['admin', 'super'].includes(role)) {
            return res.status(403).json({ success: false, message: 'forbidden' });
        }

        const email = decodeURIComponent(req.params.email || '').trim();
        if (!email) return res.status(400).json({ success: false, message: 'email required' });

        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á FE
        const rawThai =
            (req.body.thaiName ?? req.body.thai_name ?? req.body.name_th ?? req.body.nameTh ?? '').toString().trim();
        const thaiPrefix = (req.body.thaiPrefix ?? '').toString().trim();

        const update = {};
        if (rawThai) update.thaiName = rawThai;          // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á
        if ('thaiPrefix' in req.body) update.thaiPrefix = thaiPrefix; // ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Å‡πá‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ

        // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï field ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å)
        if (typeof req.body.phone === 'string') update.phone = req.body.phone.trim();

        const user = await User.findOneAndUpdate(
            { email },
            { $set: update },
            { new: true }
        );
        if (!user) return res.status(404).json({ success: false, message: 'User not found' });

        // ‡∏™‡πà‡∏á alias ‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ FE ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        const out = user.toObject ? user.toObject() : user;
        out.name_th = out.thaiName;
        out.nameTh = out.thaiName;
        out.thai_name = out.thaiName;

        return res.json({ success: true, user: out });
    } catch (err) {
        return res.status(500).json({ success: false, message: err.message });
    }
});

// ==== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (phone + ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå) ====
// ==== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (thaiName + phone + ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå) ====
app.patch('/api/users/profile', signatureUpload.single('signature'), async (req, res) => {
    try {
        const uid = req.user?.user_id;
        if (!uid) return res.status(401).json({ success: false, message: 'Not logged in' });

        const update = {};

        // ‚úÖ ‡∏£‡∏±‡∏ö thaiName ‡∏à‡∏≤‡∏Å multipart/form-data (‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å FE)
        //    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö alias thai_name ‡∏î‡πâ‡∏ß‡∏¢
        const rawThaiName = (typeof req.body.thaiName === 'string'
            ? req.body.thaiName
            : (typeof req.body.thai_name === 'string' ? req.body.thai_name : '')).trim();

        if (rawThaiName) {
            // ‡πÅ‡∏¢‡∏Å token ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ
            const HONORIFICS = ['‡∏ô‡∏≤‡∏¢', '‡∏ô‡∏≤‡∏á', '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß']
            const m = rawThaiName.match(/^(\S+)\s+(.*)$/)
            // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢, ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏¢ ‡∏Å‡πá‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠)
            if (m) {
                const prefix = m[1], rest = (m[2] || '').trim()
                if (HONORIFICS.includes(prefix) && !rest) {
                    return res.status(400).json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤' })
                }
            }
            update.thaiName = rawThaiName
        }

        if (typeof req.body.phone === 'string') {
            update.phone = req.body.phone.trim();
        }

        if (req.file) {
            update.signaturePath = `/uploads/signatures/${req.file.filename}`;
        }

        const user = await User.findOneAndUpdate(
            { user_id: uid },
            { $set: update },
            { new: true }
        );

        if (!user) return res.status(404).json({ success: false, message: 'User not found' });

        // (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á thaiName ‡πÅ‡∏•‡∏∞ thai_name ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ FE ‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        const out = user.toObject ? user.toObject() : user;
        out.thai_name = out.thaiName;

        return res.json({ success: true, user: out });
    } catch (err) {
        return res.status(500).json({ success: false, message: err.message });
    }
});


// === ‡πÄ‡∏û‡∏¥‡πà‡∏° API ‡∏î‡∏π‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å user_id ===
app.get('/api/user/:user_id', async (req, res) => {
    try {
        const user = await User.findOne({ user_id: req.params.user_id });
        if (!user) return res.status(404).send({ message: 'User not found' });
        res.send({
            name: user.name,
            user_id: user.user_id,
            thaiName: user.thaiName || '',
            picture: user.picture || '',
            signaturePath: user.signaturePath || null
        });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});

// ==================== Field CRUD ====================
app.get('/api/fields', async (req, res) => {
    try {
        const fields = await Field.find();
        res.send(fields);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.post('/api/fields', async (req, res) => {
    try {
        const { name, image, visible, hasZone, zones } = req.body;
        const field = new Field({
            name,
            image,
            visible,
            hasZone,
            zones: hasZone ? (zones || []) : []
        });
        await field.save();
        res.send({ success: true, data: field });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.patch('/api/fields/:id', async (req, res) => {
    try {
        const updateFields = {};
        ['name', 'image', 'visible', 'hasZone', 'zones'].forEach(key => {
            if (req.body[key] !== undefined) updateFields[key] = req.body[key];
        });
        const updated = await Field.findByIdAndUpdate(req.params.id, updateFields, { new: true });
        if (!updated) return res.status(404).send({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°' });
        res.send({ success: true, data: updated });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.delete('/api/fields/:id', async (req, res) => {
    try {
        const deleted = await Field.findByIdAndDelete(req.params.id);
        if (!deleted) return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°' });
        res.send({ success: true });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.post('/api/fields/:fieldId/zones', async (req, res) => {
    try {
        const { name, image, status, active } = req.body;
        const field = await Field.findById(req.params.fieldId);
        if (!field) return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°' });
        field.hasZone = true;
        field.zones.push({ name, image, status, active });
        await field.save();
        res.send({ success: true, data: field });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.patch('/api/fields/:fieldId/zones/:zoneIndex', async (req, res) => {
    try {
        const field = await Field.findById(req.params.fieldId);
        if (!field) return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°' });
        const z = parseInt(req.params.zoneIndex);
        if (!field.zones[z]) return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ã‡∏ô' });
        ['name', 'image', 'status', 'active'].forEach(key => {
            if (req.body[key] !== undefined) field.zones[z][key] = req.body[key];
        });
        await field.save();
        res.send({ success: true, data: field });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.delete('/api/fields/:fieldId/zones/:zoneIndex', async (req, res) => {
    try {
        const field = await Field.findById(req.params.fieldId);
        if (!field) return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ô‡∏≤‡∏°' });
        const z = parseInt(req.params.zoneIndex);
        if (!field.zones[z]) return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ã‡∏ô' });
        field.zones.splice(z, 1);
        await field.save();
        res.send({ success: true, data: field });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});

// ==================== Equipment CRUD ====================
app.get('/api/equipments', async (req, res) => {
    try {
        const equipments = await Equipment.find();
        res.send(equipments);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.post('/api/equipments', async (req, res) => {
    try {
        const { name, quantity, image, visible } = req.body;
        const equipment = new Equipment({ name, quantity, image, visible });
        await equipment.save();
        res.send({ success: true, data: equipment });
    } catch (err) {
        res.status(500).send({ success: false, message: err.message });
    }
});
app.patch('/api/equipments/:id', async (req, res) => {
    try {
        const updateFields = {};
        if (req.body.quantity !== undefined) updateFields.quantity = req.body.quantity;
        if (req.body.name !== undefined) updateFields.name = req.body.name;
        if (req.body.image !== undefined) updateFields.image = req.body.image;
        if (req.body.visible !== undefined) updateFields.visible = req.body.visible;
        const updated = await Equipment.findByIdAndUpdate(req.params.id, updateFields, { new: true });
        if (!updated) return res.status(404).send({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' });
        res.send({ success: true, data: updated });
    } catch (err) {
        res.status(500).send({ success: false, message: err.message });
    }
});
app.delete('/api/equipments/:id', async (req, res) => {
    try {
        const deleted = await Equipment.findByIdAndDelete(req.params.id);
        if (!deleted) return res.status(404).send({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' });
        res.send({ success: true });
    } catch (err) {
        res.status(500).send({ success: false, message: err.message });
    }
});

// ==================== Cart CRUD ====================
app.get('/api/cart', async (req, res) => {
    try {
        const { user_id } = req.query;
        if (!user_id) {
            return res.status(400).send({ message: "user_id is required" });
        }
        const cart = await Cart.find({ user_id });
        res.send(cart);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.post('/api/cart', async (req, res) => {
    try {
        const { user_id, name, quantity, image } = req.body;
        if (!user_id || !name || !quantity) {
            return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
        }
        // **‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ update ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì**
        let cartItem = await Cart.findOne({ user_id, name });
        if (cartItem) {
            cartItem.quantity += Number(quantity);
            await cartItem.save();
        } else {
            cartItem = new Cart({ user_id, name, quantity, image });
            await cartItem.save();
        }
        res.send({ success: true, message: 'Added to cart', cartItem });
    } catch (err) {
        res.status(500).send({ success: false, message: err.message });
    }
});

app.delete('/api/cart', async (req, res) => {
    try {
        const user_id = req.body?.user_id || req.query?.user_id;
        if (user_id) {
            await Cart.deleteMany({ user_id });
        } else {
            await Cart.deleteMany({});
        }
        res.send({ success: true });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.put('/api/cart/update', async (req, res) => {
    const { user_id, name, quantity } = req.body;
    try {
        await Cart.updateOne({ user_id, name }, { $set: { quantity } });
        res.sendStatus(200);
    } catch (e) {
        res.status(500).json({ error: e.message });
    }
});
app.delete('/api/cart/delete', async (req, res) => {
    const { user_id, name } = req.body;
    try {
        await Cart.deleteOne({ user_id, name });
        res.sendStatus(200);
    } catch (e) {
        res.status(500).json({ error: e.message });
    }
});
app.patch('/api/users/update_id', async (req, res) => {
    try {
        const { old_user_id, new_user_id } = req.body;
        if (!old_user_id || !new_user_id) {
            return res.status(400).json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ user_id ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà' });
        }

        // ‡∏´‡∏≤ user ‡πÄ‡∏î‡∏¥‡∏°
        const user = await User.findOne({ user_id: old_user_id });
        if (!user) {
            return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ user_id ‡πÉ‡∏´‡∏°‡πà ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏°
        const exist = await User.findOne({ user_id: new_user_id });
        if (exist) {
            return res.status(400).json({ success: false, message: 'user_id ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß' });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user_id
        user.user_id = new_user_id;
        await user.save();

        res.json({ success: true, message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user_id ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', user });
    } catch (err) {
        console.error('Update user_id error:', err);
        res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
});
// ==================== History (Borrow/Return/Approve/Disapprove) ====================
// ================== POST /api/history ==================
// ============ CREATE HISTORY ============
app.post('/api/history', async (req, res) => {
    try {
        const body = req.body || {};
        const type = String(body.type || 'field').toLowerCase();

        // ---------- helpers ----------
        const toArr = (v) => Array.isArray(v) ? v : (v ? [v] : []);
        const isEmptyLike = (v) => {
            const s = (v ?? '').toString().trim().toLowerCase();
            return !s || s === 'null' || s === 'undefined';
        };
        const ALLOWED = new Set(['staff', 'admin', 'super']);
        const cleanRoles = (arr) =>
            Array.from(new Set(
                (Array.isArray(arr) ? arr : [])
                    .map(r => String(r || '').trim().toLowerCase())
                    .filter(r => ALLOWED.has(r))
            ));

        // ‚úÖ ‡πÉ‡∏´‡∏°‡πà: helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö ‚Üí string (‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ array/object)
        const normalizeText = (v) => {
            if (v == null) return '';
            if (Array.isArray(v)) {
                return v.map(x => (x == null ? '' : String(x))).filter(Boolean).join(', ');
            }
            if (typeof v === 'object') {
                if ('label' in v) return String(v.label);
                if ('value' in v) return String(v.value);
                try { return JSON.stringify(v); } catch { return String(v); }
            }
            return String(v);
        };

        const sanitizeIncomingStep = (step) => {
            if (!Array.isArray(step)) return [];
            const now = new Date();
            const seen = new Set();
            return step.map(r => {
                const role = String((r && r.role) != null ? r.role : r || '')
                    .trim()
                    .toLowerCase();
                if (!role || !ALLOWED.has(role) || seen.has(role)) return null;
                seen.add(role);
                let approve = null;
                if (r && 'approve' in r) {
                    approve = r.approve === true ? true : r.approve === false ? false : null;
                }
                return { role, approve, createdAt: r?.createdAt ? new Date(r.createdAt) : now, updatedAt: now };
            }).filter(Boolean);
        };

        // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®. ‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        const parseDateSmart = (raw) => {
            if (!raw) return null;
            let s = String(raw).trim();
            const yMatch = s.match(/(\d{4})/);
            if (yMatch) {
                const y = parseInt(yMatch[1], 10);
                if (y > 2400) s = s.replace(String(y), String(y - 543));
            }
            let d = new Date(s);
            if (!isNaN(d)) return d;
            const m = s.match(/^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/);
            if (m) {
                const dd = m[1].padStart(2, '0');
                const mm = m[2].padStart(2, '0');
                const yy = m[3];
                d = new Date(`${yy}-${mm}-${dd}T00:00:00`);
                if (!isNaN(d)) return d;
            }
            return null;
        };

        const isSameCalendarDay = (d1, d2) =>
            d1.getFullYear() === d2.getFullYear() &&
            d1.getMonth() === d2.getMonth() &&
            d1.getDate() === d2.getDate();

        const isEquipmentMultiDay = (b) => {
            const sRaw = b?.since || b?.start_date;
            const eRaw = b?.uptodate || b?.end_date;
            const s = parseDateSmart(sRaw);
            const e = parseDateSmart(eRaw);
            if (!s || !e) return false;
            return !isSameCalendarDay(s, e);
        };

        // ‡∏≠‡πà‡∏≤‡∏ô roles ‡∏à‡∏≤‡∏Å Settings ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á schema ‡πÄ‡∏Å‡πà‡∏≤/‡πÉ‡∏´‡∏°‡πà
        async function loadRolesFromSettings() {
            let field = [], equipment = [], equipment_one_day = [];
            try {
                const [docField, docEquip, docEquip1d] = await Promise.all([
                    Settings.findOne({ key: 'approval_roles_field' }).lean(),
                    Settings.findOne({ key: 'approval_roles_equipment' }).lean(),
                    Settings.findOne({ key: 'approval_roles_equipment_one_day' }).lean(),
                ]);
                field = cleanRoles(docField?.value || []);
                equipment = cleanRoles(docEquip?.value || []);
                equipment_one_day = cleanRoles(docEquip1d?.value || []);
            } catch { }

            try {
                if (!field.length || !equipment.length || !equipment_one_day.length) {
                    const setDoc = await Settings.findOne({ key: 'approval_roles' }).lean();
                    const val = setDoc?.value || {};
                    field = field.length ? field : cleanRoles(val.field || []);
                    equipment = equipment.length ? equipment : cleanRoles(val.equipment || []);
                    equipment_one_day = equipment_one_day.length
                        ? equipment_one_day
                        : cleanRoles(val.equipment_one_day || val.one_day || val.equipmentOneDay || []);
                }
            } catch { }

            return { field, equipment, equipment_one_day };
        }

        // ---------- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ step ‡∏ó‡∏µ‡πà FE ‡∏™‡πà‡∏á‡∏°‡∏≤ ----------
        let step = sanitizeIncomingStep(body.step);

        // ---------- ‡πÇ‡∏´‡∏•‡∏î roles ‡∏à‡∏≤‡∏Å settings ----------
        const rolesAll = await loadRolesFromSettings();
        let rolesField = rolesAll.field || [];
        let rolesEquipMulti = rolesAll.equipment || [];
        let rolesEquip1Day = rolesAll.equipment_one_day || [];

        // ---------- ‡∏™‡∏£‡∏∏‡∏õ step ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ----------
        if (type === 'field') {
            if (rolesField.length > 0) {
                const now = new Date();
                step = rolesField.map(r => ({ role: r, approve: null, createdAt: now, updatedAt: now }));
            }
        } else if (type === 'equipment') {
            const now = new Date();
            if (isEquipmentMultiDay(body)) {
                if (rolesEquipMulti.length > 0) {
                    step = rolesEquipMulti.map(r => ({ role: r, approve: null, createdAt: now, updatedAt: now }));
                } else if (!step.length) {
                    step = [{ role: 'staff', approve: null, createdAt: now, updatedAt: now }];
                }
            } else {
                if (rolesEquip1Day.length > 0) {
                    step = rolesEquip1Day.map(r => ({ role: r, approve: null, createdAt: now, updatedAt: now }));
                } else if (rolesEquipMulti.length > 0) {
                    step = rolesEquipMulti.map(r => ({ role: r, approve: null, createdAt: now, updatedAt: now }));
                } else if (!step.length) {
                    step = [{ role: 'staff', approve: null, createdAt: now, updatedAt: now }];
                }
            }
        }

        const status = String(body.status || 'pending').toLowerCase();

        const doc = await History.create({
            user_id: body.user_id,
            type,
            status,
            name: body.name,
            name_active: body.name_active,
            zone: body.zone,
            since: isEmptyLike(body.since) ? null : (parseDateSmart(body.since) || body.since),
            uptodate: isEmptyLike(body.uptodate) ? null : (parseDateSmart(body.uptodate) || body.uptodate),
            startTime: body.startTime || '',
            endTime: body.endTime || '',
            quantity: body.quantity,
            date: body.date ? new Date(body.date) : new Date(),
            agency: body.agency || '',
            booking_id: body.booking_id || null,

            attachment: toArr(body.attachment),
            fileName: toArr(body.fileName),
            fileType: toArr(body.fileType),
            fileUrl: body.fileUrl || '',
            bookingPdfUrl: body.bookingPdfUrl || body.booking_pdf_url || '',
            bookingPdf: body.bookingPdf || null,

            proxyStudentName: body.proxyStudentName || '',
            proxyStudentId: body.proxyStudentId || '',
            username_form: body.username_form || '',
            id_form: body.id_form || '',

            utilityRequest: body.utilityRequest || '',
            facilityRequest: body.facilityRequest || '',
            turnon_air: body.turnon_air || '',
            turnoff_air: body.turnoff_air || '',
            turnon_lights: body.turnon_lights || '',
            turnoff_lights: body.turnoff_lights || '',
            amphitheater: body.amphitheater || '',
            need_equipment: body.need_equipment || '',
            other: body.other || '',

            aw: body.aw || '',
            tel: body.tel || '',
            reasons: body.reasons || '',
            participants: body.participants || '',
            requester: body.requester || '',

            no_receive: body.no_receive || '',
            date_receive: body.date_receive || null,
            receiver: body.receiver || '',
            restroom: body.restroom || '',

            receive_date: body.receive_date ? parseDateSmart(body.receive_date) : null,
            receive_time: body.receive_time || '',
            createdAt_old: body.createdAt_old || null,

            reason_admin: body.reason_admin || '',

            // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö room_request ‡πÇ‡∏î‡∏¢ normalize ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏™‡∏°‡∏≠
            room_request: normalizeText(body.room_request ?? body.roomRequest),

            // ‚¨ÖÔ∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÄ‡∏Å‡πá‡∏ö step ‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß
            step,
        });

        console.log('[history.create] type=%s booking=%s step=%j', doc.type, doc.booking_id, doc.step);

        // === ‡πÅ‡∏à‡πâ‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÄ‡∏î‡∏¥‡∏°) ===
        try {
            const requesterName = await getUserDisplayNameById(doc.user_id);

            if (doc.type === 'field') {
                await notifyAdminNewFieldBooking({
                    requester: requesterName,
                    building: doc.name,
                    activity: doc.name_active,
                    since: doc.since,
                    uptodate: doc.uptodate,
                    zone: doc.zone,
                    booking_id: doc.booking_id,
                });
            } else if (doc.type === 'equipment') {
                const items = [{ name: doc.name, quantity: doc.quantity }];
                const hasPeriod = !!doc?.since && !!doc?.uptodate;

                if (hasPeriod) {
                    await notifyAdminNewBorrow({ requester: requesterName, items, booking_id: doc.booking_id });
                } else {
                    await notifyStaffNewBorrow({ requester: requesterName, items, booking_id: doc.booking_id });
                }
            }
        } catch (mailErr) {
            console.error('notify error:', mailErr);
        }

        return res.status(201).json(doc);
    } catch (err) {
        console.error('POST /api/history error:', err);
        return res.status(400).json({ message: err.message || 'Create history failed' });
    }
});








// ================== PATCH /api/history/:id/step ==================
// body: { role?: string, approve?: true|false|null, action?: true|false|null, remark?: string, syncStatus?: boolean }
app.patch('/api/history/:id/step', async (req, res) => {
    try {
        const id = req.params.id;

        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á approve (‡πÉ‡∏´‡∏°‡πà) ‡πÅ‡∏•‡∏∞ action (‡πÄ‡∏Å‡πà‡∏≤)
        const approve = (typeof req.body.approve === 'boolean')
            ? req.body.approve
            : (typeof req.body.action === 'boolean' ? req.body.action : null);

        const remark = typeof req.body.remark === 'string' ? req.body.remark : '';
        const syncStatus = req.body.syncStatus !== false; // default true

        const actorRole = String(req.body.role || (req.user?.role || '')).toLowerCase();
        const actorName = (req.user?.name || req.user?.email || req.user?.user_id || '').toString();

        const updated = await updateHistoryStep({
            id,
            role: actorRole,
            approve,        // ‚úÖ ‡πÉ‡∏ä‡πâ approve
            actorName,
            remark
        }, { syncStatus });



        // === ‡πÄ‡∏™‡∏£‡∏¥‡∏°: ‡∏Å‡∏£‡∏ì‡∏µ "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß" ‡πÉ‡∏´‡πâ staff ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ + ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ===
        try {
            const actorRole = String(req.body.role || (req.user?.role || '')).toLowerCase();
            const effApprove = (typeof req.body.approve === 'boolean')
                ? req.body.approve
                : (typeof req.body.action === 'boolean' ? req.body.action : null);

            // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á)
            const fresh = await History.findById(id).lean();
            const isEquip = String(fresh?.type || '').toLowerCase() === 'equipment';

            if (isEquip && effApprove === true && actorRole === 'staff' && isSingleDay(fresh)) {
                // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà approved ‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏ö
                if (String(fresh.status).toLowerCase() !== 'approved') {
                    const now = new Date();
                    await History.findByIdAndUpdate(id, {
                        $set: {
                            status: 'approved',
                            approvedBy: (req.user?.thaiName || req.user?.name || req.user?.email || req.user?.user_id || 'staff'),
                            approvedById: (req.user?.user_id || ''),
                            approvedAt: now
                        }
                    }, { new: true });

                    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                    const borrower = await User.findOne({ user_id: fresh.user_id }).lean();
                    if (borrower?.email) {
                        const borrowerName = borrower.thaiName || borrower.name || borrower.email || borrower.user_id || '';
                        const itemsHtml = listToHtml([{ name: fresh.name, quantity: fresh.quantity }]);
                        const pdfUrl = ''; // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ

                        await sendApproveEquipmentEmailImmediate({
                            to: borrower.email,
                            name: borrowerName,
                            itemsHtml,
                            fileUrl: pdfUrl
                        });
                    }
                }
            }
        } catch (mailErr) {
            console.error('[one-day staff approve mail] error:', mailErr.message);
        }

        res.json(updated);
    } catch (err) {
        console.error('PATCH /api/history/:id/step error:', err);
        res.status(400).json({ message: err.message || 'Update step failed' });
    }
});




app.get('/api/history', async (req, res) => {
    try {
        const filter = {};
        if (req.query.user_id) filter.user_id = req.query.user_id;
        if (req.query.booking_id) filter.booking_id = req.query.booking_id;

        const histories = await History.find(filter).lean();
        console.log("All histories:", histories.map(h => ({ name: h.name, user_id: h.user_id, type: h.type, status: h.status })));

        const userIds = histories.map(h => h.user_id);
        const users = await User.find({ user_id: { $in: userIds } }).lean();
        const userMap = {};
        users.forEach(u => userMap[u.user_id] = u.name);

        histories.forEach(h => {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡∏à‡∏≤‡∏Å ObjectId (‡πÅ‡∏ö‡∏ö new)
            const timestamp = new mongoose.Types.ObjectId(h._id).getTimestamp();

            let sortDate;
            if (h.type === 'field' && h.date && h.startTime) {
                sortDate = new Date(`${h.date}T${h.startTime}`);
            } else if (h.approvedAt) {
                sortDate = new Date(h.approvedAt);
            } else {
                sortDate = timestamp;
            }

            h.sortDate = sortDate;
            h.requester = userMap[h.user_id] || h.user_id;

            // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà h.fileUrl
            if (h.bookingPdfUrl && typeof h.bookingPdfUrl === 'string' && h.bookingPdfUrl.trim()) {
                h.fileUrl = h.bookingPdfUrl;
            } else if (Array.isArray(h.attachment) && h.attachment.length && typeof h.attachment[0] === 'string') {
                h.fileUrl = h.attachment[0];
            } else if (typeof h.attachment === 'string' && h.attachment.trim()) {
                h.fileUrl = h.attachment;
            } else {
                h.fileUrl = null;
            }
        });

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ sortDate ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        histories.sort((a, b) => b.sortDate - a.sortDate);

        res.send(histories);
    } catch (err) {
        console.error('Error in /api/history:', err);
        res.status(500).send({ message: err.message });
    }
});


app.delete('/api/history/:id', async (req, res) => {
    try {
        const deleted = await History.findByIdAndDelete(req.params.id);
        if (!deleted) return res.status(404).send({ message: 'Not found' });
        res.send({ success: true });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
// == Return equipment (keep ALL original fields) ==
app.patch('/api/history/:id/return', async (req, res) => {
    try {
        const id = req.params.id;

        // ===== payload ‡∏à‡∏≤‡∏Å FE =====
        const staffId = String(req.body.staff_id || '').trim();
        const condition = String(req.body.condition || req.body.status || 'good').toLowerCase();
        const remark = String(req.body.remark || '').trim();

        // ‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô
        const receiverThaiName = String(req.body.handoverReceiverThaiName || req.body.receiverThaiName || '').trim();
        const receiverDateStr = String(req.body.handoverReceiverDate || req.body.receiverDate || '').trim();

        // PDF (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á PDF, ‡πÑ‡∏°‡πà‡∏¢‡∏∏‡πà‡∏á‡∏Å‡∏±‡∏ö attachment ‡πÄ‡∏î‡∏¥‡∏°)
        const pdfUrl = String(req.body.bookingPdfUrl || req.body.booking_pdf_url || '').trim();
        const pdfFileName =
            (Array.isArray(req.body.pdfFileName) ? req.body.pdfFileName[0] : req.body.pdfFileName) ||
            (Array.isArray(req.body.fileName) ? req.body.fileName[0] : req.body.fileName) ||
            'equipment_return.pdf';
        const pdfFileType =
            (Array.isArray(req.body.fileType) ? req.body.fileType[0] : req.body.fileType) ||
            'application/pdf';

        // ===== ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ =====
        const doc = await History.findById(id);
        if (!doc) return res.status(404).json({ message: 'Not found' });

        // idempotent: ‡∏ñ‡πâ‡∏≤ returned ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏à‡∏ö (‡∏Å‡∏±‡∏ô‡∏ö‡∏ß‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ã‡πâ‡∏≥)
        if ((doc.status || '').toLowerCase() === 'returned') {
            return res.status(200).json(doc);
        }

        // ===== ‡∏ö‡∏ß‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå) =====
        if ((doc.type || '').toLowerCase() === 'equipment' && doc.name && doc.quantity) {
            await Equipment.updateOne(
                { name: (doc.name || '').trim() },
                { $inc: { quantity: Math.abs(Number(doc.quantity) || 0) } }
            );
        }

        // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô (staff)
        let returnedBy = staffId;
        if (staffId) {
            const staff = await User.findOne({ user_id: staffId });
            returnedBy = (staff && (staff.thaiName || staff.name)) || staffId;
        }

        const now = new Date();
        const receiverDate = receiverDateStr
            ? (isNaN(new Date(receiverDateStr)) ? now : new Date(receiverDateStr))
            : now;

        // ===== ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° $set (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ attachment/fileName/fileType ‡πÄ‡∏î‡∏¥‡∏°) =====
        const set = {
            status: 'returned',             // << ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô returned
            condition,                      // 'good' | 'bad'
            returnedById: staffId || doc.returnedById || '',
            returnedBy: returnedBy || doc.returnedBy || '',
            returnedAt: now,

            // üü¢ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô
            ...(remark ? { handoverRemarkReceiver: remark, remark } : {}),

            // ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤ FE ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≥‡∏Å‡∏•‡∏±‡∏ö)
            ...(req.body.since ? { since: req.body.since } : {}),
            ...(req.body.uptodate ? { uptodate: req.body.uptodate } : {}),

            // single-day (‡∏ñ‡πâ‡∏≤ FE ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤)
            ...(req.body.returnPhoto ? { returnPhoto: req.body.returnPhoto } : {}),

            // ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô
            ...(receiverThaiName ? { handoverReceiverThaiName: receiverThaiName } : {}),
            handoverReceiverDate: receiverDate,

            // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á PDF ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            ...(pdfUrl ? { bookingPdfUrl: pdfUrl, pdfFileName, pdfFileType } : {}),

            // ‚úÖ step ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ staff ‡πÅ‡∏•‡∏∞ approve ‡πÅ‡∏•‡πâ‡∏ß
            step: [{
                role: 'staff',
                approve: true,
                approvedAt: now,
                updatedAt: now,
                ...(staffId ? { staffId } : {})
            }],

            updatedAt: now
        };

        const saved = await History.findByIdAndUpdate(id, { $set: set }, { new: true });

        // ===== ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•) =====
        try {
            const user = await User.findOne({ user_id: saved.user_id });
            if (user?.email) {
                await sendReturnSuccessEmail({
                    to: user.email,
                    name: user.thaiName || user.name || user.email || saved.user_id,
                    equipment: saved.name,
                    quantity: saved.quantity,
                    fileUrl: saved.bookingPdfUrl || ''   // << ‡πÅ‡∏ô‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                });
            }
        } catch (mailErr) {
            console.error('[send return mail error]', mailErr.message);
        }

        return res.json(saved);
    } catch (err) {
        console.error('request /return error:', err);
        return res.status(500).json({ message: err.message || 'Server error' });
    }
});



// === ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°) ===
app.patch('/api/history/:id/request-return', uploadReturn.single('returnPhoto'), async (req, res) => {
    try {
        const oldRecord = await History.findById(req.params.id);
        if (!oldRecord) return res.status(404).json({ message: 'Not found' });

        // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        const t = String(oldRecord.type || '').toLowerCase();
        if (t !== 'equipment') {
            return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' });
        }

        // ---- ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å multipart ‡∏´‡∏£‡∏∑‡∏≠ base64 ----
        let buffer, ext = 'jpg', mimeType = 'image/jpeg';

        if (req.file && req.file.buffer) {
            buffer = req.file.buffer;
            mimeType = req.file.mimetype || 'image/jpeg';
            ext = mime.extension(mimeType) || 'jpg';
        } else if (req.body && typeof req.body.returnPhoto === 'string' &&
            /^data:image\/(png|jpe?g);base64,/i.test(req.body.returnPhoto)) {
            const m = req.body.returnPhoto.match(/^data:image\/(png|jpe?g);base64,/i);
            ext = (m && m[1] === 'jpeg') ? 'jpg' : (m && m[1]) || 'jpg';
            mimeType = `image/${ext === 'jpg' ? 'jpeg' : ext}`;
            buffer = Buffer.from(req.body.returnPhoto.split(',')[1], 'base64');
        } else {
            return res.status(400).json({ error: 'No return photo provided' });
        }

        // ---- ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á /public/uploads/returns ----
        await fs.promises.mkdir(returnsDir, { recursive: true });
        const fname = `return_${oldRecord.booking_id || oldRecord._id}_${Date.now()}.${ext}`;
        const fpath = path.join(returnsDir, fname);
        await fs.promises.writeFile(fpath, buffer);
        const fileUrl = `${req.protocol}://${req.get('host')}/uploads/returns/${fname}`;

        // ---- helper ----
        const toArr = (v) => Array.isArray(v) ? v.filter(Boolean) : (v ? [v] : []);
        const pick = (k, def = '') => (req.body[k] ?? oldRecord[k] ?? def);

        // ‡∏Ñ‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const oldAttachment = toArr(oldRecord.attachment);
        const oldFileName = toArr(oldRecord.fileName);
        const oldFileType = toArr(oldRecord.fileType);

        // createdAt ‡πÄ‡∏î‡∏¥‡∏° (‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å FE ‡πÄ‡∏õ‡πá‡∏ô createdAt_old ‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
        let createdAtOld = null;
        if (req.body.createdAt_old) {
            const d = new Date(req.body.createdAt_old);
            if (!isNaN(d)) createdAtOld = d;
        } else if (oldRecord.createdAt) {
            createdAtOld = new Date(oldRecord.createdAt);
        }

        // ‡∏ü‡∏¥‡∏•‡∏î‡πå handover (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const handoverById = req.body.handoverById ?? req.body.staff_id ?? oldRecord.handoverById ?? '';
        const handoverBy = req.body.handoverBy ?? req.body.handover_by ?? oldRecord.handoverBy ?? '';
        const handoverRemarkSender = req.body.handoverRemarkSender ?? req.body.handover_remark_sender ?? oldRecord.handoverRemarkSender ?? '';
        const handoverRemarkReceiver = req.body.handoverRemarkReceiver ?? req.body.handover_remark_receiver ?? oldRecord.handoverRemarkReceiver ?? '';
        const handoverAt = req.body.handoverAt ? new Date(req.body.handoverAt) : (oldRecord.handoverAt || null);

        // ---- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ + step ‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå) ----
        const now = new Date();
        const docData = {
            user_id: oldRecord.user_id,
            booking_id: oldRecord.booking_id || null,
            type: 'equipment',
            name: oldRecord.name,
            quantity: oldRecord.quantity,

            date: now,
            since: oldRecord.since || null,
            uptodate: oldRecord.uptodate || null,
            startTime: oldRecord.startTime || '',
            endTime: oldRecord.endTime || '',

            // <<<< ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            status: 'return-pending',
            step: [{ role: 'staff', approve: null }],   // ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà staff ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

            // ‡∏Ñ‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
            ...(oldAttachment.length ? { attachment: oldAttachment } : {}),
            ...(oldFileName.length ? { fileName: oldFileName } : {}),
            ...(oldFileType.length ? { fileType: oldFileType } : {}),

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ñ‡πà‡∏≤‡∏¢
            returnPhoto: fileUrl,

            createdAt_old: createdAtOld,

            zone: pick('zone'),
            agency: pick('agency'),
            username_form: pick('username_form'),
            id_form: pick('id_form'),
            proxyStudentName: pick('proxyStudentName'),
            proxyStudentId: pick('proxyStudentId'),
            bookingPdf: pick('bookingPdf', null),
            bookingPdfUrl: pick('bookingPdfUrl', null),
            name_active: pick('name_active'),
            remark: pick('remark', ''),

            // ‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏ß‡πâ‡∏î‡∏π‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)
            approvedBy: oldRecord.approvedBy || '',
            approvedById: oldRecord.approvedById || '',

            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            handoverById,
            handoverBy,
            handoverAt,
            handoverRemarkSender,
            handoverRemarkReceiver,

            // ‡∏Ç‡πâ‡∏≤‡∏° middleware ‡∏Ç‡∏≠‡∏á Mongoose -> ‡πÉ‡∏™‡πà timestamps ‡πÄ‡∏≠‡∏á
            createdAt: now,
            updatedAt: now
        };

        // ‚¨á ‡πÉ‡∏ä‡πâ insertOne ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏Ç‡πâ‡∏≤‡∏°" pre-save hooks ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status/step
        const ins = await History.collection.insertOne(docData);
        const newDoc = await History.findById(ins.insertedId);

        // ‡πÅ‡∏à‡πâ‡∏á staff ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô
        try {
            const staffEmails = await getStaffEmails();
            if (staffEmails.length) {
                const borrower = await User.findOne({ user_id: oldRecord.user_id });
                const userName = borrower?.thaiName || borrower?.name || borrower?.email || borrower?.user_id || '';
                const itemsHtml = listToHtml([{ name: oldRecord.name, quantity: oldRecord.quantity }]);
                await sendBulk(
                    staffEmails,
                    '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
                    `
            <div>
              <h2>‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</h2>
              <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô:</b> ${userName}</p>
              ${itemsHtml}
              <p><b>‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢:</b> <a href="${newDoc.returnPhoto}" target="_blank" rel="noopener">‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏£‡∏π‡∏õ</a></p>
              <p><b>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ</p>
              <p><b>https://reserv-scc.mfu.ac.th/</p>
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                );
            }
        } catch (mailErr) {
            console.error('[notify staff on return-pending] error:', mailErr.message);
        }

        return res.status(201).json({ success: true, doc: newDoc });
    } catch (err) {
        console.error('request-return error:', err);
        res.status(500).json({ error: 'Server error' });
    }
});



// ================== PATCH /api/history/:id/handover ==================
// ====================== HANDOVER (STAFF) ======================
app.patch('/api/history/:id/handover', async (req, res) => {
    try {
        const body = req.body || {};

        const handoverById = (body.handoverById || body.staff_id || body.actor_id || '').toString().trim();
        const handoverByName = (body.handoverByName || body.thai_name || '').toString().trim();
        const handoverAt = body.handoverAt;
        const remarkSender = (body.remarkSender || body.remark_sender || '').toString().trim();
        const remarkReceiver = (body.remarkReceiver || body.remark_receiver || '').toString().trim();
        const booking_id = body.booking_id ? String(body.booking_id) : null;
        const bookingPdfUrl = (body.bookingPdfUrl || body.booking_pdf_url || '').toString().trim();

        // ===== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö =====
        if (!handoverById && !handoverByName) {
            return res.status(400).json({ success: false, message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ staff_id ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö' });
        }

        // ===== ‡∏´‡∏≤ finalName ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤ =====
        let finalName = handoverByName;
        if (!finalName && handoverById) {
            const u = await User.findOne({ user_id: handoverById }).lean();
            finalName =
                (u?.thaiName && String(u.thaiName).trim()) ||
                (u?.name && String(u.name).trim()) ||
                handoverById;
        }

        // ===== ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° field ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ã‡πá‡∏ï (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞‡∏ï‡πâ‡∏≠‡∏á status) =====
        const now = new Date();
        const setDoc = {
            handoverById: handoverById || '',
            handoverBy: finalName || '',
            handoverAt: handoverAt ? new Date(handoverAt) : now,
            ...(remarkSender ? { handoverRemarkSender: remarkSender } : {}),
            ...(remarkReceiver ? { handoverRemarkReceiver: remarkReceiver } : {}),
            ...(bookingPdfUrl
                ? {
                    bookingPdfUrl: bookingPdfUrl,
                    bookingPdf: bookingPdfUrl,
                    booking_pdf_url: bookingPdfUrl,
                }
                : {}),
        };

        // ===== ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ equipment + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏≠‡∏á approved) =====
        let targets = [];
        if (booking_id) {
            targets = await History.find({
                type: 'equipment',
                booking_id,
                status: { $in: ['approved', 'Approved'] },
            }).lean();
        } else {
            const doc = await History.findById(req.params.id).lean();
            if (!doc) return res.status(404).json({ message: 'Not found' });
            if (String(doc.type).toLowerCase() !== 'equipment') {
                return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' });
            }
            if (!['approved', 'Approved'].includes(String(doc.status))) {
                return res.status(409).json({ message: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô approved ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÑ‡∏î‡πâ' });
            }
            targets = [doc];
        }

        if (!targets.length) {
            return res.status(409).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö (approved)' });
        }

        const ids = targets.map(t => t._id);

        // ===== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: set ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status) =====
        const bulkSet = await History.updateMany(
            { _id: { $in: ids } },
            { $set: setDoc }
        );

        // ===== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï step: staff.approve = true =====
        await History.updateMany(
            { _id: { $in: ids } },
            { $set: { 'step.$[el].approve': true } },
            { arrayFilters: [{ 'el.role': 'staff' }] }
        );

        // ===== ‡∏´‡∏±‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å usageByMonthYear/usageCount (‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö) =====
        const usageMap = {};
        for (const it of targets) {
            const nm = (it.name || '').trim();
            const qty = Math.abs(Number(it.quantity) || 0);
            if (!nm || !qty) continue;
            usageMap[nm] = (usageMap[nm] || 0) + qty;
        }
        const year = now.getFullYear();
        const month = now.getMonth() + 1;

        for (const [equipName, usageQty] of Object.entries(usageMap)) {
            const equipment = await Equipment.findOne({ name: equipName });
            if (!equipment) continue;

            equipment.usageByMonthYear = equipment.usageByMonthYear || [];
            const found = equipment.usageByMonthYear.find(x => x.year === year && x.month === month);
            if (found) found.usage += usageQty;
            else equipment.usageByMonthYear.push({ year, month, usage: usageQty });

            const currentQty = Number(equipment.quantity) || 0;
            equipment.quantity = Math.max(0, currentQty - usageQty);

            equipment.usageCount = (Number(equipment.usageCount) || 0) + usageQty;

            equipment.markModified('usageByMonthYear');
            await equipment.save();
        }

        // ===== ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏• =====
        const borrowerUserId =
            targets?.[0]?.user_id ||
            (await History.findById(req.params.id).lean().catch(() => null))?.user_id ||
            null;

        const itemsForMail = targets.map(d => ({ name: d.name, quantity: d.quantity }));

        // ===== ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏ß‡πà‡∏≤ "‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß" =====
        try {
            if (borrowerUserId) {
                const borrower = await User.findOne({ user_id: borrowerUserId }).lean();
                if (borrower?.email) {
                    const borrowerName =
                        borrower?.thaiName || borrower?.name || borrower?.email || borrower?.user_id || '';
                    const itemsHtml = listToHtml(itemsForMail);

                    await sendBulk(
                        borrower.email,
                        '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß',
                        `
              <div>
                <h2>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</h2>
                <p><b>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö:</b> ${borrowerName}</p>
                ${itemsHtml}
                ${bookingPdfUrl ? `<p><b>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:</b> <a href="${bookingPdfUrl}" target="_blank" rel="noopener">‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå</a></p>` : ''}
                <p style="margin-top:10px;"><b>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</p>
                <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
              </div>
            `
                    );
                }
            }
        } catch (mailErr) {
            console.error('handover: send mail to borrower error:', mailErr.message);
        }

        // ===== ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö =====
        return res.json({
            success: true,
            matched: bulkSet.matchedCount ?? bulkSet.nMatched ?? ids.length,
            modified: bulkSet.modifiedCount ?? bulkSet.nModified ?? ids.length,
            handoverBy: { id: handoverById, name: finalName },
            items: itemsForMail,
            note: 'status ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô approved',
        });
    } catch (err) {
        console.error('handover error:', err);
        res.status(500).json({ message: err.message });
    }
});

app.get('/api/history/file/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const fileIdx = Number(req.query.fileIdx || 0);

        // 1. ‡∏´‡∏≤ History ‡∏Å‡πà‡∏≠‡∏ô
        let history = await History.findById(id);

        // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ History ‡πÉ‡∏´‡πâ‡∏´‡∏≤ BookingEquipment
        if (!history) {
            // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô booking_id ‡∏Ç‡∏≠‡∏á BookingEquipment
            let equip = await BookingEquipment.findById(id);
            if (!equip) equip = await BookingEquipment.findOne({ booking_id: id });
            if (equip && equip.attachedFiles && equip.attachedFiles[fileIdx]) {
                const file = equip.attachedFiles[fileIdx];
                // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏ü‡∏•‡πå upload ‡∏à‡∏£‡∏¥‡∏á
                if (file.fileUrl && file.fileUrl.startsWith('http')) {
                    return res.redirect(file.fileUrl);
                }
                // base64 ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ô‡∏ö‡∏°‡∏≤
                let base64Data = file.base64 || file.fileData;
                let mimeType = file.mimeType || 'application/octet-stream';
                let fileName = file.fileName || file.originalName || 'attachment';
                if (base64Data && base64Data.startsWith('data:')) {
                    // ‡∏ï‡∏±‡∏î prefix data:mimetype;base64,
                    mimeType = base64Data.substring(5, base64Data.indexOf(';'));
                    base64Data = base64Data.split(',')[1];
                }
                const buffer = Buffer.from(base64Data, 'base64');
                res.setHeader('Content-Type', mimeType);
                res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
                return res.end(buffer);
            }
            return res.status(404).send('No file data');
        }

        // 3. ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏à‡∏≤‡∏Å History (‡πÅ‡∏ö‡∏ö array ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)
        let fileData = Array.isArray(history.attachment) ? history.attachment[fileIdx] : history.attachment;
        let fileType = Array.isArray(history.fileType) ? history.fileType[fileIdx] : history.fileType || 'application/octet-stream';
        let fileName = Array.isArray(history.fileName) ? history.fileName[fileIdx] : history.fileName || 'attachment';

        if (!fileData) return res.status(404).send('No file data');

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL (‡πÄ‡∏ä‡πà‡∏ô "/uploads/xxx.pdf" ‡∏´‡∏£‡∏∑‡∏≠ "http://...")
        // ‚úÖ NEW: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÄ‡∏ï‡πá‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏ò /uploads ‡πÉ‡∏´‡πâ redirect/stream ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
        if (typeof fileData === 'string') {
            if (/^https?:\/\//i.test(fileData)) {
                const proxied = `${req.protocol}://${req.get('host')}/file-proxy/pdf?url=${encodeURIComponent(fileData)}`;
                return res.redirect(proxied);
            }
            if (fileData.startsWith('/uploads/')) {
                // ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏à‡∏≤‡∏Å static ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤ static ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á header ‡∏ñ‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà)
                const full = `${req.protocol}://${req.get('host')}${fileData}`;
                // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô proxy ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ:
                // const proxied = `${req.protocol}://${req.get('host')}/file-proxy/pdf?url=${encodeURIComponent(full)}`;
                return res.redirect(full);
            }
        }
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô base64
        let base64Data = fileData;
        if (base64Data.startsWith('data:')) {
            if (!fileType || fileType === 'application/octet-stream') {
                fileType = base64Data.substring(5, base64Data.indexOf(';'));
            }
            base64Data = base64Data.split(',')[1];
        }
        const buf = Buffer.from(base64Data, 'base64');

        const inlineTypes = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/gif'];
        const dispositionType = inlineTypes.includes(fileType) ? 'inline' : 'attachment';
        res.setHeader('Content-Type', fileType);
        res.setHeader('Content-Disposition', `${dispositionType}; filename="${fileName}"`);
        res.end(buf);
    } catch (e) {
        res.status(500).send('Invalid base64 or server error');
    }
});

// ===== PDF Proxy (fix header) =====
app.get('/file-proxy/pdf', async (req, res) => {
    try {
        const { url } = req.query;
        if (!url) return res.status(400).send('Missing url');

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SSRF: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡πÑ‡∏î‡πâ
        const allowHost = ['reserv-scc.mfu.ac.th'];
        const u = new URL(url);
        if (!allowHost.includes(u.hostname)) return res.status(403).send('Forbidden host');

        const resp = await axios.get(url, { responseType: 'stream' });

        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö header ‡πÉ‡∏´‡πâ viewer ‡∏Ç‡∏≠‡∏á Chrome ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        res.setHeader('Content-Type', 'application/pdf');
        if (resp.headers['content-length']) {
            res.setHeader('Content-Length', resp.headers['content-length']);
        }
        res.setHeader('Accept-Ranges', 'bytes');
        res.setHeader('X-Content-Type-Options', 'nosniff');

        resp.data.pipe(res);
    } catch (err) {
        console.error('[file-proxy/pdf] error:', err.message);
        res.status(502).send('Failed to fetch PDF');
    }
});
// ‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
app.post('/api/history/singleday', async (req, res) => {
    try {
        const { user_id, items, status, borrowDate } = req.body
        if (!user_id || !items || !Array.isArray(items) || items.length === 0) {
            return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' })
        }
        const savedItems = []
        for (const item of items) {
            const newHistory = new History({
                user_id,
                name: item.name,
                quantity: item.quantity,
                status,
                date: borrowDate ? new Date(borrowDate) : new Date(),
                type: 'equipment',
                agency: item.agency || ''   // ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô
            });
            await newHistory.save();

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° usage ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Information type:equipment
            if (newHistory.agency && newHistory.agency.trim() !== "") {
                await Information.findOneAndUpdate(
                    { unit: newHistory.agency, type: 'equipment' },
                    { $inc: { usage: 1 } },
                    { upsert: true }
                );
            }
            savedItems.push(newHistory)
        }

        res.json({ success: true, items: savedItems })

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° list ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        const itemsForMail = savedItems.map(d => ({
            name: d.name,
            quantity: d.quantity
        }));

        // ‡πÅ‡∏à‡πâ‡∏á staff ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
        try {
            const requesterName = await getUserDisplayNameById(user_id);
            await notifyStaffNewBorrow({
                requester: requesterName,
                items: itemsForMail,
                booking_id: null  // ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á booking_id ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            });
        } catch (mailErr) {
            console.error('[singleday mail] error:', mailErr.message);
        }

        return res.json({ success: true, items: savedItems });
        
    } catch (err) {
        res.status(500).json({ success: false, message: err.message })
    }
})

// === CANCEL (single item) ===
app.post('/api/history/:id/cancel', async (req, res) => {
    try {
        const id = req.params.id;

        const actorRole = (req.user?.role || '').toLowerCase();
        const canceledBy = String(req.body.canceled_by || '').toLowerCase();
        const isUserCancel = canceledBy === 'user' || actorRole === 'user';

        // ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏à‡∏≤‡∏Å FE (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á remark ‡πÅ‡∏•‡∏∞ reason)
        const remarkText = (typeof req.body.remark === 'string'
            ? req.body.remark
            : (typeof req.body.reason === 'string' ? req.body.reason : '')
        ).trim();

        const before = await History.findById(id);
        if (!before) return res.status(404).json({ message: 'Not found' });

        // ===== FIELD =====
        if (before.type === 'field') {
            const adminId = req.user?.user_id || req.body.admin_id || '';
            const admin = await User.findOne({ user_id: adminId });
            const adminName = admin ? admin.name : adminId;

            const setObj = {
                status: 'cancel',
                canceledBy: adminName,
                canceledById: adminId,
                canceledAt: new Date(),
            };
            // ‡πÄ‡∏Å‡πá‡∏ö remark (‡πÅ‡∏•‡∏∞ reason ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤) ‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏°‡∏≤
            if (remarkText) {
                setObj.remark = remarkText;
                setObj.reason = remarkText;
            }

            const updated = await History.findByIdAndUpdate(id, setObj, { new: true });

            // ===== ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° =====
            try {
                const requesterDisp = await getUserDisplayNameById(updated.user_id);
                const when = `
  <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${formatDateRange(updated.since, updated.uptodate)}</p>
  <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${(updated.startTime || '-')} ‡∏ñ‡∏∂‡∏á ${(updated.endTime || '-')}</p>
`;


                const wasSecApproved = isUserCancel && (before?.status === 'pending') && !!before?.approvedById;

                if (wasSecApproved) {
                    const [superEmails, adminEmails] = await Promise.all([getSuperEmails(), getAdminEmails()]);
                    const toList = [...new Set([...(superEmails || []), ...(adminEmails || [])])];

                    await sendBulk(
                        toList,
                        `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á ${requesterDisp} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏Ç‡∏≤‡∏Ø ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)`,
                        `
      <div>
        <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
        <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${requesterDisp}</p>
        <p><b>‡∏™‡∏ô‡∏≤‡∏°:</b> ${updated.name || '-'}</p>
        <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${updated.name_active || '-'}</p>
        ${when}
        <p style="margin-top:10px;">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏•‡∏Ç‡∏≤‡∏Ø ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</p>
        <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
      </div>
      `
                    );
                } else if (isUserCancel) {
                    const adminEmails = await getAdminEmails();
                    await sendBulk(
                        adminEmails,
                        `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á ${requesterDisp} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß`,
                        `
      <div>
        <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
        <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${requesterDisp}</p>
        <p><b>‡∏™‡∏ô‡∏≤‡∏°:</b> ${updated.name || '-'}</p>
        <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${updated.name_active || '-'}</p>
        ${when}
        <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
      </div>
      `
                    );
                }
            } catch (mailErr) {
                console.error('cancel_field notify error:', mailErr.message);
            }

            return res.json({ success: true, data: updated });
        }

        // ===== EQUIPMENT (‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß) =====
        const setObj = {
            status: 'cancel',
            canceledAt: new Date(),
            ...(req.user?.user_id ? { canceledById: req.user.user_id } : {}),
        };
        // ‡πÄ‡∏Å‡πá‡∏ö remark (‡πÅ‡∏•‡∏∞ reason) ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏°‡∏≤
        if (remarkText || req.body.remark !== undefined || req.body.reason !== undefined) {
            setObj.remark = remarkText;          // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å
            setObj.reason = remarkText;          // ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô reason
        }

        const updated = await History.findByIdAndUpdate(id, setObj, { new: true });

        // ==== ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÄ‡∏î‡∏¥‡∏° ====
        try {
            const wasApproved = String(before.status).toLowerCase() === 'approved';
            const single = isSingleDay(before);
            const borrowerName = await getUserDisplayNameById(before.user_id);
            const borrower = await User.findOne({ user_id: before.user_id });
            const itemsHtml = listToHtml([{ name: before.name, quantity: before.quantity }]);

            if (single && isUserCancel) {
                const staffEmails = await getStaffEmails();
                await sendBulk(
                    staffEmails,
                    `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)`,
                    `
            <div>
              <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${borrowerName}</p>
              ${itemsHtml}
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                );
            }

            if (!single && isUserCancel && !wasApproved) {
                const adminEmails = await getAdminEmails();
                await sendBulk(
                    adminEmails,
                    `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏∑‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)`,
                    `
            <div>
              <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${borrowerName}</p>
              ${itemsHtml}
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                );
            }

            if (!single && isUserCancel && wasApproved) {
                const staffEmails = await getStaffEmails();
                await sendBulk(
                    staffEmails,
                    `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß`,
                    `
            <div>
              <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${borrowerName}</p>
              ${itemsHtml}
              <p style="margin-top:10px;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö)</p>
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                );
            }

            if (borrower?.email && isUserCancel) {
                await sendBulk(
                    borrower.email,
                    '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß',
                    `
            <div>
              <h2>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${borrowerName}</p>
              ${itemsHtml}
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                );
            }
        } catch (mailErr) {
            console.error('cancel(equipment) mail error:', mailErr.message);
        }

        return res.json({ success: true, data: updated });
    } catch (err) {
        console.error('POST /api/history/:id/cancel error:', err);
        res.status(500).json({ message: err.message });
    }
});


// === CANCEL (whole booking) ===
app.post('/api/history/booking/:bookingId/cancel', async (req, res) => {
    try {
        const bookingId = String(req.params.bookingId || '').trim();
        if (!bookingId) return res.status(400).json({ message: 'bookingId required' });

        const actorRole = (req.user?.role || '').toLowerCase();
        const canceledBy = String(req.body.canceled_by || '').toLowerCase();
        const isUserCancel = canceledBy === 'user' || actorRole === 'user';

        // ‡∏£‡∏±‡∏ö remark/reason ‡∏à‡∏≤‡∏Å FE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô booking ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        const remarkText = (typeof req.body.remark === 'string'
            ? req.body.remark
            : (typeof req.body.reason === 'string' ? req.body.reason : '')
        ).trim();

        // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á Pending/Approved (‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå)
        const statusInPA = { $in: [/^pending$/i, /^approved$/i] };

        const docs = await History.find({
            type: 'equipment',
            booking_id: bookingId,
            status: statusInPA
        }).lean();

        if (!docs.length) {
            return res.status(404).json({ message: 'no pending/approved items in this booking' });
        }

        const wasApproved = docs.some(d => String(d.status).toLowerCase() === 'approved');
        const single = isSingleDay(docs[0]);
        const borrower = await User.findOne({ user_id: docs[0].user_id });
        const borrowerName = await getUserDisplayNameById(docs[0].user_id);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î + ‡πÄ‡∏Å‡πá‡∏ö remark/reason
        const setObj = {
            status: 'cancel',
            canceledAt: new Date(),
            ...(req.user?.user_id ? { canceledById: req.user.user_id } : {}),
        };
        if (remarkText || req.body.remark !== undefined || req.body.reason !== undefined) {
            setObj.remark = remarkText;
            setObj.reason = remarkText;
        }

        await History.updateMany(
            { type: 'equipment', booking_id: bookingId, status: statusInPA },
            { $set: setObj }
        );

        const items = docs.map(d => ({ name: d.name, quantity: d.quantity }));
        const itemsHtml = listToHtml(items);

        // ==== ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÄ‡∏î‡∏¥‡∏° ====
        try {
            if (single && isUserCancel) {
                const staffEmails = await getStaffEmails();
                await sendBulk(
                    staffEmails,
                    `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)`,
                    `
            <div>
              <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${borrowerName}</p>
              ${itemsHtml}
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                );
            }

            if (!single && isUserCancel && !wasApproved) {
                const adminEmails = await getAdminEmails();
                await sendBulk(
                    adminEmails,
                    `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏∑‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)`,
                    `
            <div>
              <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${borrowerName}</p>
              ${itemsHtml}
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                );
            }

            if (!single && isUserCancel && wasApproved) {
                const staffEmails = await getStaffEmails();
                await sendBulk(
                    staffEmails,
                    `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß`,
                    `
            <div>
              <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${borrowerName}</p>
              ${itemsHtml}
              <p style="margin-top:10px;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°: ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö)</p>
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                );
            }

            if (borrower?.email && isUserCancel) {
                await sendBulk(
                    borrower.email,
                    '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß',
                    `
            <div>
              <h2>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${borrowerName}</p>
              ${itemsHtml}
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                );
            }
        } catch (mailErr) {
            console.error('booking-cancel mail error:', mailErr.message);
        }

        return res.json({ success: true, canceled: docs.length });
    } catch (err) {
        console.error('POST /api/history/booking/:bookingId/cancel error:', err);
        res.status(500).json({ message: err.message });
    }
});



// API: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Ñ‡∏∑‡∏ô (return-pending)
app.get('/api/equipments/return-pending', async (req, res) => {
    try {
        // 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà return-pending ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏à‡∏≤‡∏Å History
        const pendings = await History.find({ type: 'equipment', status: 'return-pending' }).lean();

        // 2. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° booking_id ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ pending
        const bookingIds = pendings.map(item => item.booking_id).filter(Boolean);

        // 3. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å approved ‡∏ó‡∏µ‡πà booking_id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠ join since/uptodate)
        const approveds = await History.find({
            type: 'equipment',
            status: 'approved',
            booking_id: { $in: bookingIds }
        }).lean();

        // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏à‡∏≤‡∏Å booking_id -> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• approved
        const approvedMap = {};
        approveds.forEach(a => {
            if (a.booking_id) approvedMap[String(a.booking_id)] = a;
        });

        // 5. join ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• since/uptodate ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤
        const results = pendings.map(p => {
            const approved = approvedMap[String(p.booking_id)];
            return {
                ...p,
                since: approved?.since || "",
                uptodate: approved?.uptodate || "",
                approvedBy: p.approvedBy || approved?.approvedBy || '',
                approvedById: p.approvedById || approved?.approvedById || ''
            };
        });

        // DEBUG LOG (‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
        // console.log("return-pending results:", results);

        res.send(results);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
// === Helper: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ===
// helper ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß/‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
// === Helper: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å) ===
function isSingleDay(history) {
    const ymd = (v) => {
        if (!v) return '';
        const d = v instanceof Date ? v : new Date(v);
        if (isNaN(d)) return '';
        return d.toISOString().slice(0, 10);
    };
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡πÄ‡∏Å‡πà‡∏≤ ‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const s = ymd(history.since || history.start_date || history.date);
    const u = ymd(history.uptodate || history.end_date || history.date);
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Ñ flow
    return !s || !u || s === u;
}

app.get('/api/equipments/pending', async (req, res) => {
    try {
        const items = await History.find({ type: 'equipment', status: 'pending' });
        // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (isSingleDay = true)
        const singleDayItems = items.filter(isSingleDay);
        res.send(singleDayItems);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.get('/api/equipments/approve-list', async (req, res) => {
    try {
        // ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á pending, approved, disapproved, return-pending, returned
        const items = await History.find({
            type: 'equipment',
            status: { $in: ['pending', 'approved', 'disapproved', 'return-pending', 'returned'] }
        }).sort({ date: -1 });
        res.send(items);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});

// PATCH /api/equipments/:id/status
app.patch('/api/equipments/:id/status', async (req, res) => {
    try {
        const { status } = req.body;

        // ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
        const before = await History.findById(req.params.id);
        if (!before) return res.status(404).send({ message: 'Not found' });

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        const updated = await History.findByIdAndUpdate(
            req.params.id,
            { status: status },
            { new: true }
        );

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£ ‚Äú‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‚Äù ‡∏Å‡πá‡∏à‡∏ö
        const isCancelStatus = ['cancel', 'canceled', 'cancelled'].includes(String(status).toLowerCase());
        if (!isCancelStatus) {
            return res.send(updated);
        }

        // ===== ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÄ‡∏°‡∏•‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å =====
        const wasApproved = String(before.status).toLowerCase() === 'approved';
        const single = isSingleDay(before);
        const borrowerName = await getUserDisplayNameById(before.user_id);
        const borrower = await User.findOne({ user_id: before.user_id });
        const items = [{ name: before.name, quantity: before.quantity }];
        const itemsHtml = listToHtml(items);
        const bookingIdForMail = before.booking_id || '';

        // ‡∏£‡∏∞‡∏ö‡∏∏ ‚Äú‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‚Äù: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô user ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏¢‡∏¥‡∏á‡πÄ‡∏°‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πÄ‡∏õ‡∏Ñ‡∏Ç‡∏≠
        const actorRole = (req.user?.role || '').toLowerCase();
        const canceledBy = String(req.body.canceled_by || '').toLowerCase(); // FE ‡∏™‡πà‡∏á 'user' ‡∏°‡∏≤‡πÑ‡∏î‡πâ
        const isUserCancel = canceledBy === 'user' || actorRole === 'user';

        // (A) ‡∏¢‡∏∑‡∏° "‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß" ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å -> ‡πÅ‡∏à‡πâ‡∏á staff ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
        if (single && isUserCancel) {
            const staffEmails = await getStaffEmails();
            await sendBulk(
                staffEmails,
                `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)`,
                `
        <div>
          <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
          ${itemsHtml}
          <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
        </div>
        `
            );
        }

        // (B) ‡∏¢‡∏∑‡∏° "‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà approved) -> ‡πÅ‡∏à‡πâ‡∏á admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
        if (!single && isUserCancel && !wasApproved) {
            const adminEmails = await getAdminEmails();
            await sendBulk(
                adminEmails,
                `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏∑‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)`,
                `
        <div>
          <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
          ${itemsHtml}
          <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
        </div>
        `
            );
        }

        // (C) ‡∏¢‡∏∑‡∏° "‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" ‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö) ‡πÅ‡∏ï‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å -> ‡πÅ‡∏à‡πâ‡∏á staff ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
        if (!single && isUserCancel && wasApproved) {
            const staffEmails = await getStaffEmails();
            await sendBulk(
                staffEmails,
                `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á ${borrowerName} ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß`,
                `
        <div>
          <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
          <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${borrowerName}</p>
          ${itemsHtml}
          <p style="margin-top:10px;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö)</p>
          <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
        </div>
        `
            );
        }

        // (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        if (borrower?.email && isUserCancel) {
            await sendBulk(
                borrower.email,
                '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß',
                `
        <div>
          <h2>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
          ${itemsHtml}
          <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
        </div>
        `
            );
        }

        res.send(updated);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});



// ================== PATCH /api/history/:id/disapprove_equipment ==================
app.patch('/api/history/:id/disapprove_equipment', async (req, res) => {
    try {
        const staffId = req.body.staff_id;
        const remark = (typeof req.body.remark === 'string'
            ? req.body.remark
            : (typeof req.body.reason === 'string' ? req.body.reason : '')
        ).trim();

        const staff = await User.findOne({ user_id: staffId });
        const staffName = staff ? staff.name : staffId;

        const updated = await History.findByIdAndUpdate(
            req.params.id,
            {
                status: 'disapproved',
                disapprovedBy: staffName,
                disapprovedById: staffId,
                disapprovedAt: new Date(),
                ...(remark ? { remark } : {})
            },
            { new: true }
        );

        if (updated) {
            // ‚úÖ step: admin ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (approve=false) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö equipment
            try {
                await updateHistoryStep(
                    { id: updated._id, role: 'admin', approve: false, actorName: staffName, remark },
                    { syncStatus: true } // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô disapproved
                );
            } catch (e) {
                console.error('update step (disapprove_equipment) error:', e.message);
            }

            // ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏Ñ‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
            try {
                const user = await User.findOne({ user_id: updated.user_id });
                if (user && user.email) {
                    await sendDisapproveEquipmentEmail({
                        to: user.email,
                        name: user.name || user.email || updated.user_id,
                        equipment: updated.name,
                        quantity: updated.quantity
                    });
                }
            } catch (mailErr) {
                console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á disapprove equipment ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', mailErr.message);
            }
        }

        res.send(updated);
    } catch (err) {
        console.error('PATCH /api/history/:id/disapprove_equipment error:', err);
        res.status(500).send({ message: err.message });
    }
});

// ========== Approve/Disapprove Field ==========
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô Express/Mongoose
app.get('/api/history/approve_field', async (req, res) => {
    try {
        const mode = String(req.query.mode || '').toLowerCase();

        // ===== ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ (super) =====
        if (mode === 'super') {
            const finalStatuses = [
                'approved', 'rejected', 'disapproved', 'cancel', 'cancelled',
                'returned', 'done', 'complete'
            ];

            const adminApproved = { role: /admin/i, approve: true };
            const superApproved = { role: /super/i, approve: true };

            // 1) type: field ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            // 2) ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡∏á‡∏≤‡∏ô (status ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏à‡∏ö)
            // 3) ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏≤‡∏Ø/‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏°‡∏µ step admin approve = true) **‡∏´‡∏£‡∏∑‡∏≠** ‡∏°‡∏µ approvedBy/approvedAt (fallback ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
            // 4) ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ step ‡∏Ç‡∏≠‡∏á super ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
            const superPendingQuery = {
                type: 'field',
                status: { $nin: finalStatuses },
                $or: [
                    { step: { $elemMatch: adminApproved } },
                    { approvedBy: { $exists: true, $ne: '' }, approvedAt: { $exists: true, $ne: null } }
                ],
                $nor: [
                    { step: { $elemMatch: superApproved } }
                ]
            };

            const rows = await History.find(superPendingQuery)
                .lean()
                .sort({ updatedAt: -1, createdAt: -1 });

            return res.json(rows);
        }

        // ===== ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà mode) ‚Äî ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏° =====
        const empty = v => v === undefined || v === null || v === '';
        const adminNotApproved = { role: 'admin', $or: [{ approve: { $exists: false } }, { approve: null }, { approve: false }] };
        const staffApproved = { role: 'staff', approve: true };

        const rows = await History.find({
            type: { $in: ['field', 'equipment'] },
            $or: [
                {
                    type: 'field',
                    step: { $elemMatch: adminNotApproved },
                    status: { $nin: ['disapproved', 'cancel', 'cancelled'] }
                },
                {
                    type: 'equipment',
                    since: { $nin: [null, ''] },
                    uptodate: { $nin: [null, ''] },
                    step: { $elemMatch: adminNotApproved },
                    status: { $nin: ['disapproved', 'cancel', 'cancelled', 'returned'] }
                },
                {
                    type: 'equipment',
                    $and: [
                        { $or: [{ since: { $exists: false } }, { since: null }, { since: '' }] },
                        { $or: [{ uptodate: { $exists: false } }, { uptodate: null }, { uptodate: '' }] }
                    ],
                    step: {
                        $all: [
                            { $elemMatch: staffApproved },
                            { $elemMatch: adminNotApproved }
                        ]
                    },
                    status: { $nin: ['disapproved', 'cancel', 'cancelled', 'returned'] }
                }
            ]
        })
            .lean()
            .sort({ updatedAt: -1, createdAt: -1 });

        return res.json(rows);
    } catch (err) {
        console.error('approve_field list error:', err);
        res.status(500).json({ message: err.message });
    }
});

// Cancel field booking (admin/staff ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)
// PATCH /api/history/:id/cancel_field
app.patch('/api/history/:id/cancel_field', async (req, res) => {
    try {
        const adminId = req.body.admin_id || "";
        const admin = await User.findOne({ user_id: adminId });
        const adminName = admin ? (admin.thaiName || admin.name || admin.email || adminId) : adminId;

        const oldHistory = await History.findById(req.params.id);
        if (!oldHistory) return res.status(404).send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });

        const remark = (typeof req.body.remark === 'string'
               ? req.body.remark
           : (typeof req.body.reason === 'string' ? req.body.reason : '')
         ).trim();

        const updated = await History.findByIdAndUpdate(
            req.params.id,
            {
                status: 'cancel',
                canceledBy: adminName,
                canceledById: adminId,
                canceledAt: new Date(),
                ...(remark ? { remark, reason: remark } : {})
            },
            { new: true }
        );
        if (!updated) return res.status(404).send({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });

        // ==== ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• ====
        try {
            const actorRole = (req.user?.role || '').toLowerCase();
            const canceledBy = String(req.body.canceled_by || '').toLowerCase(); // 'user' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏≠‡∏á
            const isUserCancel = canceledBy === 'user' || actorRole === 'user';

            const requesterDisp = await getUserDisplayNameById(updated.user_id);
            const when = `
        <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${formatDateRange(updated.since, updated.uptodate)}</p>
        <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${(updated.startTime || '-')} ‡∏ñ‡∏∂‡∏á ${(updated.endTime || '-')}</p>
      `;

            // ========== ‡πÄ‡∏Ñ‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ) ==========
            if (isUserCancel) {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç‡∏≤‡∏Ø ‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
                const wasSecApproved = (oldHistory?.status === 'pending') && !!oldHistory?.approvedById;
                if (wasSecApproved) {
                    const [superEmails, adminEmails] = await Promise.all([getSuperEmails(), getAdminEmails()]);
                    const toList = [...new Set([...(superEmails || []), ...(adminEmails || [])])];
                    await sendBulk(
                        toList,
                        `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á ${requesterDisp} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏Ç‡∏≤‡∏Ø ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)`,
                        `
              <div>
                <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
                <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${requesterDisp}</p>
                <p><b>‡∏™‡∏ô‡∏≤‡∏°:</b> ${updated.name || '-'}</p>
                <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${updated.name_active || '-'}</p>
                ${when}
                ${remark ? `<p><b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${remark}</p>` : ''}
                <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
              </div>
            `
                    );
                } else {
                    const adminEmails = await getAdminEmails();
                    await sendBulk(
                        adminEmails,
                        `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏Ç‡∏≠‡∏á ${requesterDisp} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß`,
                        `
              <div>
                <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</h2>
                <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${requesterDisp}</p>
                <p><b>‡∏™‡∏ô‡∏≤‡∏°:</b> ${updated.name || '-'}</p>
                <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${updated.name_active || '-'}</p>
                ${when}
                ${remark ? `<p><b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</b> ${remark}</p>` : ''}
                <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
              </div>
            `
                    );
                }
            }
            // ========== ‡πÄ‡∏Ñ‡∏™‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô/‡∏™‡∏ï‡∏≤‡∏ü‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‚Üí ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏Ç‡∏≠ ==========
            else {
                const borrower = await User.findOne({ user_id: updated.user_id }).lean();
                if (borrower?.email) {
                    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                    await sendCancelFieldEmail({
                        to: borrower.email,
                        name: borrower.thaiName || borrower.name || borrower.email || updated.user_id,
                        field: updated.name,
                        activity: updated.name_active,
                        since: updated.since,
                        uptodate: updated.uptodate,
                        startTime: updated.startTime,
                        endTime: updated.endTime,
                        remark: remark
                    });

                }
            }
        } catch (mailErr) {
            console.error('cancel_field notify error:', mailErr.message);
        }

        res.send(updated);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});




// --------- PATCH APPROVE ------------
// ================== PATCH /api/history/:id/approve_equipment ==================
// ====================== APPROVE EQUIPMENT (ADMIN) ======================
// ====================== APPROVE EQUIPMENT (ADMIN/STAFF) ======================
app.patch('/api/history/:id/approve_equipment', async (req, res) => {
    try {
        // 0) ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Å‡∏î?
        const actorId = (
            req.body.admin_id ?? req.body.staff_id ?? req.body.actor_id ?? ''
        ).toString().trim();
        if (!actorId) {
            return res.status(400).json({ success: false, message: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ staff_id ‡∏´‡∏£‡∏∑‡∏≠ admin_id (‡∏´‡∏£‡∏∑‡∏≠ actor_id)' });
        }

        const actor = await User.findOne({ user_id: actorId }).lean();
        const actorName =
            (actor?.thaiName && String(actor.thaiName).trim()) ||
            (actor?.name && String(actor.name).trim()) ||
            (actor?.email && String(actor.email).trim()) ||
            actorId;

        // 1) ‡πÇ‡∏´‡∏•‡∏î seed + ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏ô‡∏¥‡∏î
        const seed = await History.findById(req.params.id).lean();
        if (!seed) return res.status(404).json({ success: false, message: 'not found' });
        if (String(seed.type).toLowerCase() !== 'equipment') {
            return res.status(400).json({ success: false, message: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' });
        }

        // 2) ‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ pending (‡∏ó‡∏±‡πâ‡∏á booking_id ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)
        const pendingQuery = seed.booking_id
            ? { type: 'equipment', booking_id: String(seed.booking_id), status: { $in: ['pending', 'Pending'] } }
            : { _id: seed._id, type: 'equipment', status: { $in: ['pending', 'Pending'] } };

        const pendingItems = await History.find(pendingQuery).lean();
        if (!pendingItems.length) {
            return res.status(409).json({ success: true, message: 'already-approved-or-no-pending' });
        }

        const ids = pendingItems.map(x => x._id);
        const now = new Date();

        // 3) ‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á "‡∏ú‡∏π‡πâ‡∏Å‡∏î"
        const rolesFromBody = Array.isArray(req.body.step)
            ? req.body.step
                .filter(s => s && (s.approve === true || String(s.approve).toLowerCase() === 'true'))
                .map(s => String(s.role || '').toLowerCase())
                .filter(Boolean)
            : [];
        const actorRole = req.body.admin_id ? 'admin'
            : req.body.staff_id ? 'staff'
                : (rolesFromBody.includes('admin') ? 'admin' : 'staff');

        // 4) ‡∏ï‡∏¥‡πä‡∏Å approve ‡πÉ‡∏´‡πâ role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        const applyApproveForRole = async (role) => {
            await History.updateMany(
                { _id: { $in: ids }, 'step.role': role },
                {
                    $set: {
                        'step.$[el].approve': true,
                        'step.$[el].actorName': actorName,
                        'step.$[el].approvedAt': now,
                        'step.$[el].updatedAt': now,
                    }
                },
                { arrayFilters: [{ 'el.role': role }] }
            );
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ element ‡∏Ç‡∏≠‡∏á role ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ push ‡πÉ‡∏´‡∏°‡πà
            const missing = pendingItems
                .filter(it => !((Array.isArray(it.step) ? it.step : [])
                    .some(s => String(s.role || '').toLowerCase() === role)))
                .map(it => it._id);
            if (missing.length) {
                await History.updateMany(
                    { _id: { $in: missing } },
                    { $push: { step: { role, approve: true, actorName, approvedAt: now, updatedAt: now } } }
                );
            }
        };
        await applyApproveForRole(actorRole);

        // 5) ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à finalize (approved) ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏Ñ‡∏á pending
        const groupHasAdmin = pendingItems.some(it =>
            (Array.isArray(it.step) ? it.step : [])
                .some(s => String(s.role || '').toLowerCase() === 'admin')
        );
        const groupSingleDay = pendingItems.every(isSingleDay);

        let finalized = false;
        if (!groupHasAdmin) {
            // staff-only (‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡∏∑‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‚Üí ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            await History.updateMany(pendingQuery, {
                $set: {
                    status: 'approved',
                    approvedBy: actorName,
                    approvedById: actorId,
                    approvedAt: now,
                }
            });
            finalized = true;
        } else if (actorRole === 'admin') {
            // ‡∏°‡∏µ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ admin ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ admin ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Å‡∏î ‚Üí ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏ö
            await History.updateMany(pendingQuery, {
                $set: {
                    status: 'approved',
                    approvedBy: actorName,
                    approvedById: actorId,
                    approvedAt: now,
                }
            });
            finalized = true;
        }
        // ‡∏ñ‡πâ‡∏≤ groupHasAdmin && actorRole==='staff' ‚áí ‡∏¢‡∏±‡∏á pending (‡∏£‡∏≠ admin)

        // 6) ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß/‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)
        // 6) ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß/‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)
        try {
            const borrowerUserId = pendingItems[0]?.user_id || '';
            const borrower = borrowerUserId ? await User.findOne({ user_id: borrowerUserId }).lean() : null;

            if (borrower?.email) {
                const borrowerName = borrower.thaiName || borrower.name || borrower.email || borrower.user_id || '';
                const itemsHtml = listToHtml(pendingItems.map(d => ({ name: d.name, quantity: d.quantity })));

                if (actorRole === 'staff' && groupSingleDay) {
                    // ‚úÖ staff ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ "‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß" ‚Üí ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ user ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏°‡∏µ "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö")
                    await sendApproveEquipmentEmailImmediate({
                        to: borrower.email,
                        name: borrowerName,
                        itemsHtml
                    });
                    // ‚õî ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏ñ‡∏∂‡∏á staff ‡∏ß‡πà‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö
                } else if (actorRole === 'admin' && finalized) {
                    // admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‚Üí ‡πÅ‡∏à‡πâ‡∏á user ‡∏ß‡πà‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö)
                    await sendBulk(
                        borrower.email,
                        '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö)',
                        `
          <div>
            <h2>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß</h2>
            <p><b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°:</b> ${borrowerName}</p>
            ${itemsHtml}
            <p style="margin-top:10px;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: <b>‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà</b></p>
            <p><b>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏µ‡∏¨‡∏≤‡∏≠‡πÄ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå(‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô)</p>
            <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
          </div>
        `
                    );

                    // ‚úÖ ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ staff ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ "admin" ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Å‡∏î‡πÅ‡∏•‡∏∞ finalized ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                    const staffEmails = await getStaffEmails();
                    if (staffEmails.length) {
                        await sendBulk(
                            staffEmails,
                            '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö',
                            `
            <div>
              <h2>‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°:</b> ${borrowerName}</p>
              ${itemsHtml}
              <p style="margin-top:10px;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <b>‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö</b></p>
              <p><b>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ</p>
              <p><b>https://reserv-scc.mfu.ac.th/</p>
              <hr><p style="font-size:0.95em;color:#888;">Sport Complex ‚Äì MFU</p>
            </div>
          `
                        );
                    }
                }
            }
        } catch (mailErr) {
            console.error('[approve_equipment mail] error:', mailErr.message);
        }

        // 7) ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        const after = await History.find(pendingQuery).lean();
        return res.json({
            success: true,
            actorRole,
            approvedFinalized: finalized,
            affected: after.length,
            items: after
        });
    } catch (err) {
        console.error('PATCH /api/history/:id/approve_equipment error:', err);
        res.status(500).json({ message: err.message || 'Server error' });
    }
});


// Approve field booking
// ================== PATCH /api/history/:id/approve_field ==================
app.patch('/api/history/:id/approve_field', async (req, res) => {
    try {
        const { id } = req.params;

        // === 1) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ù‡∏±‡πà‡∏á admin ===
        const adminId = (req.body.admin_id || '').toString().trim();
        const admin = adminId ? await User.findOne({ user_id: adminId }) : null;

        const adminName =
            (admin?.name && String(admin.name).trim()) ||
            `${admin?.firstname || ''} ${admin?.lastname || ''}`.trim() ||
            adminId || 'unknown';

        const reasonAdmin =
            typeof req.body.reason_admin === 'string'
                ? req.body.reason_admin.trim()
                : '';

        const sc = req.body.secretary_choice || {};
        const secretaryChoice = {
            to_head: !!sc.to_head,
            for_consider: !!sc.for_consider,
            other_checked: !!sc.other_checked,
        };

        const bodyThai = (req.body.thaiName_admin || req.body.thaiName || '').trim();
        const bodySig = (req.body.signaturePath_admin || req.body.signaturePath || '').trim();

        const fallbackThai =
            bodyThai ||
            admin?.thaiName_admin || admin?.thaiName || admin?.thai_name ||
            `${admin?.firstname_th || ''} ${admin?.lastname_th || ''}`.trim() || '';

        const fallbackSig =
            bodySig ||
            admin?.signaturePath_admin || admin?.signaturePath ||
            admin?.signature_path || admin?.signatureUrl || '';

        const bodyPdfUrl = (req.body.bookingPdfUrl || req.body.booking_pdf_url || '').trim();

        // === 2) ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô field + pending ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) ===
        const cond = { _id: id, type: 'field', status: 'pending' };
        let doc = await History.findOne(cond).lean();
        if (!doc) return res.status(404).send({ message: 'not found or not pending' });

        // === 3) ‡∏£‡∏±‡∏ö "steps" ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ UI ‡πÅ‡∏•‡πâ‡∏ß normalize ===
        const rawSteps = req.body.steps || req.body.step || req.body.approval_steps || null;

        const normalizeSteps = (input) => {
            if (!input) return null;

            // ['admin','super']
            if (Array.isArray(input) && input.every(s => typeof s === 'string')) {
                return input.map(role => ({ role: String(role).trim(), enabled: true }));
            }

            // [{ role, enabled?, required?, remark? }, ...]
            if (Array.isArray(input)) {
                return input
                    .map(o => {
                        const role = (o?.role || '').toString().trim();
                        if (!role) return null;
                        return {
                            role,
                            enabled: o.enabled !== false && o.checked !== false, // default = true
                            required: o.required === true || o.must === true || undefined,
                            remark: (o.remark || '').toString().trim() || undefined,
                        };
                    })
                    .filter(Boolean);
            }

            if (typeof input === 'string') {
                return [{ role: input.trim(), enabled: true }];
            }
            return null;
        };

        const incomingSteps = normalizeSteps(rawSteps);

        // step ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô DB (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const prevStepsArr = Array.isArray(doc.step) ? doc.step : [];
        const prevByRole = new Map(prevStepsArr.map(s => [String(s.role || '').trim(), s]));

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á steps ‡∏°‡∏≤ ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ default
        const DEFAULT_ROLES = ['admin', 'super'];
        const baseRoles = incomingSteps?.map(s => s.role) ||
            (prevStepsArr.length ? prevStepsArr.map(s => String(s.role || '').trim()) : DEFAULT_ROLES);

        // ‡∏£‡∏ß‡∏° role ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤
        const allRoles = Array.from(new Set([
            ...baseRoles,
            ...prevStepsArr.map(s => String(s.role || '').trim())
        ]));

        const now = req.body.approvedAt ? new Date(req.body.approvedAt) : new Date();
        const nextSteps = [];

        for (const role of allRoles) {
            const prev = prevByRole.get(role) || {};
            const incoming = (incomingSteps || []).find(s => s.role === role);

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á enabled ‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ true
            const isEnabled = incomingSteps
                ? (incoming ? incoming.enabled !== false : true)
                : true;

            const item = {
                role,
                label: prev.label || role,
                required: (incoming?.required ?? prev.required) ?? true,
                approve: false,
                actorName: prev.actorName || '',
                actorId: prev.actorId || '',
                actedAt: prev.actedAt || null,
                remark: incoming?.remark ?? prev.remark ?? '',
                status: prev.status || 'pending', // 'pending' | 'done' | 'skipped'
                enabled: isEnabled,
            };

            if (!isEnabled) {
                // ‡∏õ‡∏¥‡∏î‡∏Ç‡∏±‡πâ‡∏ô ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°
                item.status = 'skipped';
                item.approve = true;
            }

            // ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ admin ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Å‡∏î ‚Üí ‡∏ó‡∏≥‡πÉ‡∏´‡πâ admin ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            if (role === 'admin') {
                item.enabled = true;          // admin ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏™‡∏°‡∏≠
                item.status = 'done';
                item.approve = true;
                item.actorName = adminName;
                item.actorId = adminId;
                item.actedAt = now;
                if (reasonAdmin) item.remark = reasonAdmin;
            } else {
                // ‡∏Ç‡∏±‡πâ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending ‡πÅ‡∏•‡∏∞ approve=false
                if (item.enabled) {
                    item.status = 'pending';
                    item.approve = false;
                    item.actorName = prev.actorName || '';
                    item.actorId = prev.actorId || '';
                    item.actedAt = null; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                }
            }

            nextSteps.push(item);
        }

        // ‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ admin ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ -> ‡πÅ‡∏ó‡∏£‡∏Å admin ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        if (!nextSteps.find(s => s.role === 'admin')) {
            nextSteps.unshift({
                role: 'admin',
                label: 'admin',
                required: true,
                approve: true,
                actorName: adminName,
                actorId: adminId,
                actedAt: now,
                remark: reasonAdmin || '',
                status: 'done',
                enabled: true,
            });
        }

        // === 4) ‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏° ===
        const hasRemainingEnabledNotApproved = nextSteps.some(s =>
            (s.enabled !== false) && s.role !== 'admin' && s.approve !== true
        );
        const nextStatus = hasRemainingEnabledNotApproved ? 'pending' : 'approved';

        // === 5) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å ===
        const setMain = {
            status: nextStatus,
            approvedBy: adminName,
            approvedById: adminId,
            approvedAt: now,
            ...(reasonAdmin ? { reason_admin: reasonAdmin } : {}),
            secretary_choice: secretaryChoice,
            thaiName_admin: fallbackThai,
            signaturePath_admin: fallbackSig,
            step: nextSteps,
            updatedAt: new Date(),
        };
        if (bodyPdfUrl) {
            setMain.bookingPdfUrl = bodyPdfUrl;
            setMain.booking_pdf_url = bodyPdfUrl;
        }

        let updated = await History.findOneAndUpdate(cond, { $set: setMain }, { new: true });
        if (!updated) return res.status(404).send({ message: 'not found or not pending (update phase)' });

        // === 6) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ===
        try {
            if (nextStatus === 'pending') {
                // ‡∏¢‡∏±‡∏á‡∏°‡∏µ super ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                const superEmails = await getSuperEmails();
                if (superEmails.length) {
                    await sendBulk(
                        superEmails,
                        '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏ñ‡∏∂‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤)',
                        `
            <div>
              <h2>‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡∏≤‡∏°‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
              <p><b>‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</b> ${await getUserDisplayNameById(updated.user_id)}</p>
              <p><b>‡∏™‡∏ô‡∏≤‡∏°:</b> ${updated.name || '-'}</p>
              <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${updated.name_active || '-'}</p>
              <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${formatDateRange(updated.since, updated.uptodate)}</p>
              <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${(updated.startTime || '-')} ‡∏ñ‡∏∂‡∏á ${(updated.endTime || '-')}</p>
              <p><b>‡πÇ‡∏ã‡∏ô:</b> ${updated.zone || '-'}</p>
              <p><b>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ</p>
              <p><b>https://reserv-scc.mfu.ac.th/</p>
            </div>`
                    );
                }
            } else {
                // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                const userEmail = await getUserEmailById(updated.user_id);
                if (userEmail) {
                    await sendBulk(
                        [userEmail],
                        '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß)',
                        `
            <div>
              <h2>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
              <p><b>‡∏™‡∏ô‡∏≤‡∏°:</b> ${updated.name || '-'}</p>
              <p><b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${updated.name_active || '-'}</p>
              <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${formatDateRange(updated.since, updated.uptodate)}</p>
              <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${(updated.startTime || '-')} ‡∏ñ‡∏∂‡∏á ${(updated.endTime || '-')}</p>
              <p><b>‡πÇ‡∏ã‡∏ô:</b> ${updated.zone || '-'}</p>
            </div>`
                    );
                }
            }
        } catch (mailErr) {
            console.error('notify (approve_field) error:', mailErr.message);
            // ‡πÑ‡∏°‡πà throw ‡∏ï‡πà‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ response ‡∏•‡πâ‡∏°
        }

        return res.send(updated);
    } catch (err) {
        console.error('PATCH /api/history/:id/approve_field error:', err);
        return res.status(500).send({ message: err.message });
    }
});



// ================== PATCH /api/history/:id/disapprove_field ==================
app.patch('/api/history/:id/disapprove_field', async (req, res) => {
    try {
        const adminId = req.body.admin_id;
        const remark = (typeof req.body.remark === 'string'
            ? req.body.remark
            : (typeof req.body.reason === 'string' ? req.body.reason : '')
        ).trim();

        const admin = await User.findOne({ user_id: adminId });
        const adminName = admin ? (admin.name || `${admin?.firstname || ''} ${admin?.lastname || ''}`.trim()) : adminId;

        let updated = await History.findByIdAndUpdate(
            req.params.id,
            {
                status: 'disapproved',
                disapprovedBy: adminName,
                disapprovedById: adminId,
                disapprovedAt: new Date(),
                ...(remark ? { remark } : {}),
                updatedAt: new Date(),
            },
            { new: true }
        );
        if (!updated) return res.status(404).send({ message: 'not found' });

        // ‚úÖ step: admin ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (approve=false)
        try {
            await updateHistoryStep(
                { id: req.params.id, role: 'admin', approve: false, actorName: adminName, remark: remark || '' },
                { syncStatus: true } // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô disapproved
            );
            updated = await History.findById(req.params.id);
        } catch (e) {
            console.error('update step (disapprove_field) error:', e.message);
        }

        // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏î‡∏¥‡∏°)
        try {
            const user = await User.findOne({ user_id: updated.user_id });
            if (user && user.email) {
                await sendDisapproveFieldEmail({
                    to: user.email,
                    name: user.name || user.email || updated.user_id,
                    field: updated.name,
                    activity: updated.name_active,
                    since: updated.since,
                    uptodate: updated.uptodate,
                    startTime: updated.startTime,
                    endTime: updated.endTime
                });
            }
        } catch (mailErr) {
            console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á disapprove field ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', mailErr.message);
        }

        res.send(updated);
    } catch (err) {
        console.error('PATCH /api/history/:id/disapprove_field error:', err);
        res.status(500).send({ message: err.message });
    }
});


// == APPROVE (‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏µ‡∏¨‡∏≤) ==
// ================== PATCH /api/history/:id/approve_field_super ==================
app.patch('/api/history/:id/approve_field_super', async (req, res) => {
    try {
        const { id } = req.params;

        const superId = req.body.admin_id;
        const superUser = await User.findOne({ user_id: superId });
        if (!superUser) return res.status(403).send({ message: 'forbidden' });

        const superName =
            superUser.name ||
            `${superUser.firstname || ''} ${superUser.lastname || ''}`.trim() ||
            superId;

        // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô field, ‡∏¢‡∏±‡∏á pending ‡πÅ‡∏•‡∏∞‡∏ú‡πà‡∏≤‡∏ô admin ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        const cond = {
            _id: id,
            type: 'field',
            status: 'pending',
            approvedById: { $exists: true, $ne: '' },
            approvedAt: { $exists: true },
        };

        const fileUrl = (req.body.bookingPdfUrl || req.body.booking_pdf_url || req.body.fileUrl || '').trim();

        delete req.body.attachment;
        delete req.body.fileName;

        const updateSet = {
            status: 'approved',
            superApprovedBy: superName,
            superApprovedById: superId,
            superApprovedAt: new Date(),
            to_vice_supervisor: !!req.body.to_vice_supervisor,
            for_consider_supervisor: !!req.body.for_consider_supervisor,
            other_checked_supervisor: !!req.body.other_checked_supervisor,
            reason_supervisor: req.body.reason_supervisor || '',
            thaiName_supervisor: req.body.thaiName_supervisor || '',
            signaturePath_supervisor: req.body.signaturePath_supervisor || '',
            approvedAt_supervisor: req.body.approvedAt_supervisor
                ? new Date(req.body.approvedAt_supervisor)
                : new Date(),
            head_choice_supervisor: {
                to_vice_supervisor: !!(req.body.head_choice_supervisor?.to_vice_supervisor ?? req.body.to_vice_supervisor),
                for_consider_supervisor: !!(req.body.head_choice_supervisor?.for_consider_supervisor ?? req.body.for_consider_supervisor),
                other_checked_supervisor: !!(req.body.head_choice_supervisor?.other_checked_supervisor ?? req.body.other_checked_supervisor),
            },
            updatedAt: new Date(),
        };
        if (fileUrl) {
            updateSet.bookingPdfUrl = fileUrl;
            updateSet.booking_pdf_url = fileUrl;
        }

        let updated = await History.findOneAndUpdate(cond, { $set: updateSet }, { new: true, runValidators: true });
        if (!updated) {
            return res.status(404).send({ message: 'not found, not pending, or not secretary-approved' });
        }

        // ‚úÖ step: super ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (approve=true)
        try {
            await updateHistoryStep(
                { id, role: 'super', approve: true, actorName: superName, remark: req.body.reason_supervisor || '' },
                { syncStatus: true } // ‡∏Ñ‡∏£‡∏ö admin+super -> approved
            );
            updated = await History.findById(id);
        } catch (e) {
            console.error('update step (approve_field_super) error:', e.message);
        }

        // side-effects/‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡πÄ‡∏î‡∏¥‡∏°) ‚Ä¶
        try {
            const user = await User.findOne({ user_id: updated.user_id });
            if (user?.email) {
                await sendApproveFieldEmail({
                    to: user.email,
                    name: user.name || user.email || user.user_id,
                    field: updated.name,
                    activity: updated.name_active,
                    since: updated.since,
                    uptodate: updated.uptodate,
                    startTime: updated.startTime,
                    endTime: updated.endTime,
                    fileUrl: updated.bookingPdfUrl || ''   // ‡πÅ‡∏ô‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                });
            }
        } catch (mailErr) {
            console.error('‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á approve field ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', mailErr.message);
        }

        return res.send(updated);
    } catch (err) {
        console.error(err);
        return res.status(500).send({ message: err.message });
    }
});





// ==================== Announcement (News) ====================
app.put('/api/announcement', async (req, res) => {
    try {
        const ann = await Announcement.findOneAndUpdate(
            {},
            { announce: req.body.announce },
            { upsert: true, new: true }
        );
        res.send(ann);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.get('/api/announcement', async (req, res) => {
    try {
        const ann = await Announcement.findOne({}).sort({ _id: -1 });
        res.send(ann || { announce: "" });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.delete('/api/announcement', async (req, res) => {
    try {
        await Announcement.deleteMany({});
        res.send({ success: true });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
// ==================== Booking Equipment (form data) ====================
app.post('/api/booking_equipment', async (req, res) => {
    try {

        const data = req.body;
        const booking = new BookingEquipment({
            ...data,
            attachedFiles: data.attachedFiles || []
        });
        await booking.save();

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ sync booking_id = _id (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
        if (!booking.booking_id) {
            booking.booking_id = booking._id.toString();
            await booking.save();
        }

        // ... ‡πÄ‡∏î‡∏¥‡∏°
        const agencyName = (data.agency || '').trim();
        if (agencyName && agencyName !== "‡∏≠‡∏∑‡πà‡∏ô‡πÜ") {
            const exist = await Information.findOne({ unit: agencyName, type: "equipment" });
            if (!exist) {
                await Information.create({ unit: agencyName, type: "equipment", usage: 0 });
            }
        }

        res.send({ success: true, booking });
    } catch (err) {
        res.status(500).send({ success: false, message: err.message });
    }
});
app.get('/api/booking_equipment', async (req, res) => {
    try {
        const id = req.query.id;
        if (!id) return res.status(400).json({ message: 'Missing id' });
        const booking = await BookingEquipment.findById(id);
        if (!booking) return res.status(404).json({ message: 'Booking not found' });
        res.json([booking]);  // ‡∏Ñ‡∏∑‡∏ô array ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á)
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});
app.get('/api/booking_equipment/:id', async (req, res) => {
    try {
        const { id } = req.params;
        // ‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á booking_id ‡πÅ‡∏•‡∏∞ _id
        const booking = await BookingEquipment.findOne({
            $or: [
                { _id: id },
                { booking_id: id }
            ]
        });
        if (!booking) return res.status(404).json({ message: 'Booking not found' });
        res.json(booking);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});
// =================== Booking Equipment Borrow API (‡πÉ‡∏ä‡πâ BookingEquipment) ===================
app.get('/api/booking_equipment_borrow', async (req, res) => {
    try {
        const list = await BookingEquipment.find();
        res.json(list);
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
// ======================= BookingField CRUD ============================
app.post('/api/booking_field', upload.array('files', 10), async (req, res) => {
    try {
        // -- ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà upload ‡∏°‡∏≤ --
        let filesArr = [];
        if (req.files && req.files.length) {
            filesArr = req.files.map(file => ({
                fileName: file.filename,
                originalName: file.originalname,
                fileUrl: `${req.protocol}://${req.get('host')}/uploads/${file.filename}`,
                mimetype: file.mimetype,
                size: file.size
            }));
        }

        // -- helpers --
        const parseDate = (v) => (v ? new Date(v) : null);
        const trim = (v) => (v ?? '').toString().trim();
        const norm = v => trim(v).toLowerCase();
        const yesTokens = new Set(['yes', '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å', '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£', 'true', '1']);
        const noTokens = new Set(['no', '‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å', '‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£', 'false', '0']);
        const toYesNo = v => (yesTokens.has(norm(v)) ? 'yes' : (noTokens.has(norm(v)) ? 'no' : ''));

        // -- map body -> bookingData (sanitize + normalize) --
        const bookingData = {
            aw: trim(req.body.aw),
            date: parseDate(req.body.date),
            tel: trim(req.body.tel),

            agency: trim(req.body.agency),
            name_activity: trim(req.body.name_activity),
            reasons: trim(req.body.reasons),

            since: parseDate(req.body.since),
            uptodate: parseDate(req.body.uptodate),
            since_time: trim(req.body.since_time),
            until_thetime: trim(req.body.until_thetime),

            participants: trim(req.body.participants),
            requester: trim(req.body.requester),

            building: trim(req.body.building),
            zone: trim(req.body.zone),

            // legacy fields (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà)
            need: trim(req.body.need),
            needless: trim(req.body.needless),

            // utilities
            turnon_air: trim(req.body.turnon_air),
            turnoff_air: trim(req.body.turnoff_air),
            lights: toYesNo(req.body.lights),
            turnon_lights: trim(req.body.turnon_lights),
            turnoff_lights: trim(req.body.turnoff_lights),
            restroom: toYesNo(req.body.restroom),
            utilityRequest: toYesNo(req.body.utilityRequest),

            // facility group
            facilityRequest: toYesNo(req.body.facilityRequest),
            amphitheater: trim(req.body.amphitheater),     // 3.1
            need_equipment: trim(req.body.need_equipment), // 3.2
            room_request: trim(req.body.room_request),     // ‚úÖ 3.3 (‡πÉ‡∏´‡∏°‡πà)

            other: trim(req.body.other),

            // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ/‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡πà‡∏ô
            user_id: trim(req.body.user_id),
            proxyStudentName: trim(req.body.proxyStudentName || ''),
            proxyStudentId: trim(req.body.proxyStudentId || ''),
            username_form: trim(req.body.username_form || ''),
            id_form: trim(req.body.id_form || ''),

            // ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤ field ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ä‡πâ)
            no_receive: trim(req.body.no_receive),
            date_receive: parseDate(req.body.date_receive),
            receiver: trim(req.body.receiver),

            uploadFiles: Array.isArray(req.body.uploadFiles) ? req.body.uploadFiles : [],
            files: filesArr
        };

        // ============ Server-side validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 3 ============
        if (bookingData.facilityRequest === 'yes') {
            const hasAny =
                !!bookingData.amphitheater ||
                !!bookingData.need_equipment ||
                !!bookingData.room_request; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á

            if (!hasAny) {
                return res.status(400).json({
                    success: false,
                    message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 3 (‡∏≠‡∏±‡∏í‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå/‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏µ‡∏¨‡∏≤/‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)'
                });
            }

            // ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ ‚Äú72‚Äù ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å amphitheater
            if ((bookingData.building || '').includes('72') && !bookingData.amphitheater) {
                return res.status(400).json({
                    success: false,
                    message: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 72 ‡∏û‡∏£‡∏£‡∏©‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏±‡∏í‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå (3.1)'
                });
            }
        }
        // ===============================================================

        // -- ‡∏™‡∏£‡πâ‡∏≤‡∏á booking ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô DB --
        const booking = await BookingField.create(bookingData);

        // -- ‡πÄ‡∏û‡∏¥‡πà‡∏° booking_id ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ --
        if (!booking.booking_id) {
            booking.booking_id = booking._id.toString();
            await booking.save();
        }

        res.json({ bookingId: booking._id, booking_id: booking.booking_id });
    } catch (err) {
        console.error('Create booking_field error:', err);
        res.status(500).json({ success: false, message: err.message });
    }
});
// GET: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• booking_field ‡∏ï‡∏≤‡∏° id (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö)
app.get('/api/booking_field/:id', async (req, res) => {
    try {
        const booking = await BookingField.findById(req.params.id).lean();
        if (!booking) return res.status(404).json({ message: 'Booking not found' });
        res.json(booking);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

app.get('/api/booking_field', async (req, res) => {
    try {
        const bookings = await BookingField.find();
        res.json(bookings);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á flow ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á booking + history
app.post('/api/booking_field_and_history', async (req, res) => {
    try {
        // 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á booking_field
        const booking = await BookingField.create(req.body);

        // 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á history (fix zone)
        const newHistory = new History({
            user_id: req.body.user_id,
            name: req.body.building || req.body.name,
            name_active: req.body.name_activity,
            zone: req.body.zone,                     // <-- ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            since: req.body.since,
            uptodate: req.body.uptodate,
            startTime: req.body.since_time,
            endTime: req.body.until_thetime,
            status: 'pending',
            type: 'field',
            agency: req.body.agency || '',
            booking_id: booking._id,
            username_form: req.body.username_form || '',
            id_form: req.body.id_form || ''
        });
        await newHistory.save();

        res.send({ success: true, booking, history: newHistory });
    } catch (err) {
        res.status(500).send({ success: false, message: err.message });
    }
});

// ================== UploadFile API (base64 style) ==================
app.post('/api/upload_file', async (req, res) => {
    try {
        const { fileName, fileData, user_id } = req.body;
        if (!fileName || !fileData) return res.status(400).send({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö' });
        const upload = new UploadFile({
            fileName,
            fileData,
            user_id: user_id || null,
        });
        await upload.save();
        res.send({ success: true, message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', id: upload._id });
    } catch (err) {
        res.status(500).send({ success: false, message: err.message });
    }
});
app.get('/api/upload_file', async (req, res) => {
    try {
        const files = await UploadFile.find().sort({ uploadedAt: -1 });
        res.send(files);
    } catch (err) {
        res.status(500).send({ success: false, message: err.message });
    }
});
app.get('/api/uploadfile/:id', async (req, res) => {
    const file = await UploadFile.findById(req.params.id);
    if (!file) return res.status(404).send('File not found');
    let base64Data = file.fileData;
    if (base64Data.startsWith('data:')) {
        base64Data = base64Data.split(',')[1];
    }
    const buffer = Buffer.from(base64Data, 'base64');
    res.set('Content-Type', file.mimetype || 'application/octet-stream');
    res.set('Content-Disposition', `attachment; filename="${file.fileName}"`);
    res.send(buffer);
});

// ==================== News Image API ====================
app.get('/api/img_news', async (req, res) => {
    try {
        const rows = await ImgNews.find({}, { img_url: 1, order: 1, createdAt: 1 })
            .sort({ order: 1, createdAt: 1, _id: 1 })   // ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô=‡∏ã‡πâ‡∏≤‡∏¢, ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á=‡∏Ç‡∏ß‡∏≤
            .lean();
        res.json(rows);
    } catch (e) {
        res.status(500).json({ error: e.message });
    }
});
// POST: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà (multipart/form-data, field name = "image")
app.post('/api/img_news', uploadNews.single('image'), async (req, res) => {
    try {
        if (!req.file) return res.status(400).json({ error: 'no file' });
        const relPath = `/uploads/news/${req.file.filename}`;
        const created = await ImgNews.create({ img_url: relPath });
        const base = `${req.protocol}://${req.get('host')}`;
        res.json({ success: true, data: { _id: created._id, img_url: `${base}${relPath}` } });
    } catch (e) {
        console.error('POST /api/img_news error:', e);
        res.status(500).json({ error: 'cannot create image' });
    }
});
// PUT: ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°
app.put('/api/img_news/:id', uploadNews.single('image'), async (req, res) => {
    try {
        const id = req.params.id;
        const doc = await ImgNews.findById(id);
        if (!doc) return res.status(404).json({ error: 'not found' });

        // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà -> ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if (!req.file) {
            const base = `${req.protocol}://${req.get('host')}`;
            return res.json({ success: true, data: { _id: doc._id, img_url: doc.img_url ? `${base}${doc.img_url}` : '' } });
        }

        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô /uploads)
        if (doc.img_url && doc.img_url.startsWith('/uploads/')) {
            const oldAbs = path.join(__dirname, doc.img_url);
            try { if (fs.existsSync(oldAbs)) fs.unlinkSync(oldAbs); } catch (_) { }
        }

        const relPath = `/uploads/news/${req.file.filename}`;
        doc.img_url = relPath;
        // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ base64 ‡πÅ‡∏•‡πâ‡∏ß
        if (doc.img) doc.img = undefined;
        await doc.save();

        const base = `${req.protocol}://${req.get('host')}`;
        res.json({ success: true, data: { _id: doc._id, img_url: `${base}${relPath}` } });
    } catch (e) {
        console.error('PUT /api/img_news/:id error:', e);
        res.status(500).json({ error: 'cannot update image' });
    }
});

// DELETE: ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ + ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
app.delete('/api/img_news/:id', async (req, res) => {
    try {
        const id = req.params.id;
        const doc = await ImgNews.findById(id);
        if (!doc) return res.status(404).json({ error: 'not found' });

        if (doc.img_url && doc.img_url.startsWith('/uploads/')) {
            const abs = path.join(__dirname, doc.img_url);
            try { if (fs.existsSync(abs)) fs.unlinkSync(abs); } catch (_) { }
        }

        await ImgNews.deleteOne({ _id: id });
        res.json({ success: true });
    } catch (e) {
        console.error('DELETE /api/img_news/:id error:', e);
        res.status(500).json({ error: 'cannot delete image' });
    }
});

// ==================== Members API ====================
app.post('/api/members', async (req, res) => {
    try {
        const { email, position } = req.body;
        if (!email || !position) return res.status(400).send({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö' });
        // ‡∏´‡∏≤ user ‡πÄ‡∏î‡∏¥‡∏°
        const user = await User.findOne({ email });
        if (user) {
            user.role = position.toLowerCase();
            await user.save();
            res.send({ success: true, data: user });
        } else {
            return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
        }
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});

app.get('/api/members', async (req, res) => {
    try {
        const members = await User.find(
            { role: { $in: ['staff', 'admin', 'super'] } }, // ‡πÄ‡∏û‡∏¥‡πà‡∏° super
            { email: 1, role: 1, user_id: 1, name: 1, thaiName: 1, _id: 0, signaturePath: 1 }
        );
        const mapRole = (role) => role.charAt(0).toUpperCase() + role.slice(1).toLowerCase();
        res.send(
            members.map(m => ({
                id: m.user_id,
                name: m.name,
                thaiName: m.thaiName || '',
                email: m.email,
                position: mapRole(m.role),
                signaturePath: m.signaturePath || null
            }))
        );
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});


app.patch('/api/members/:email', async (req, res) => {
    try {
        const email = req.params.email;
        const { email: newEmail, position } = req.body;
        let newRole = position ? position.toLowerCase() : undefined;
        const updateObj = {};
        if (newEmail) updateObj.email = newEmail;
        if (newRole) updateObj.role = newRole;
        const updated = await User.findOneAndUpdate(
            { email: email },
            updateObj,
            { new: true }
        );
        if (!updated) return res.status(404).send({ message: "Member not found" });
        res.send({ success: true, data: updated });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});
app.delete('/api/members/:email', async (req, res) => {
    try {
        const email = req.params.email;
        const deleted = await User.findOneAndDelete({ email });
        if (!deleted) return res.status(404).send({ message: "Member not found" });
        res.send({ success: true });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});


app.post('/api/members/update-privileged', upload.single('signature'), async (req, res) => {
    try {
        const { oldEmail, email, position, thaiName } = req.body;
        const user = await User.findOne({ email: oldEmail });
        if (!user) return res.status(404).send({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡πÄ‡∏î‡∏¥‡∏°' });

        if (email) user.email = email;
        if (position) user.role = position.toLowerCase();
        if (thaiName) user.thaiName = thaiName;
        if (req.file) {
            user.signaturePath = `/uploads/signatures/${req.file.filename}`;
        }
        await user.save();

        res.send({ success: true, data: user });
    } catch (err) {
        res.status(500).send({ message: err.message });
    }
});



// ==================== Dashboard/Information ====================
// ===== Helper: ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ß‡πà‡∏≤‡∏á/‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á schema =====
const toStr = v => (v == null ? '' : String(v));
const pickFirst = (...vals) => vals.find(x => toStr(x).trim() !== '') || '';

// ===== GET: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ =====
// ‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å collection 'information' ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á type: 'field' / 'equipment')
// ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ group ‡∏ï‡∏≤‡∏° 'unit' (‡πÑ‡∏°‡πà‡∏™‡∏ô type) ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ (code/phone/email) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
app.get('/api/information/agencies', async (req, res) => {
    try {
        const InformationCol = mongoose.connection.collection('information');

        const pipeline = [
            {
                $addFields: {
                    unitNorm: { $toLower: { $ifNull: ['$unit', ''] } },
                    codeNorm: { $ifNull: ['$code', ''] },
                    phoneNorm: { $ifNull: ['$phone', ''] },
                    emailNorm: { $ifNull: ['$email', ''] },

                    // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ "‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å"
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ createdAt ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å ObjectId
                    firstSeen: {
                        $ifNull: [
                            '$createdAt',
                            { $toDate: '$_id' }
                        ]
                    }
                }
            },
            { $match: { unitNorm: { $ne: '' } } },

            // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô group ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ $first ‡πÑ‡∏î‡πâ ‚Äú‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î‚Äù ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡πâ‡∏ô
            { $sort: { unitNorm: 1, firstSeen: 1, _id: 1 } },

            // group ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Äú‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î‚Äù = ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏û‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
            {
                $group: {
                    _id: '$unitNorm',
                    unit: { $first: '$unit' },
                    code: { $first: '$codeNorm' },
                    phone: { $first: '$phoneNorm' },
                    email: { $first: '$emailNorm' },
                    firstSeen: { $first: '$firstSeen' },
                    firstId: { $first: '$_id' } // ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
                }
            },

            // *** ‡∏´‡πâ‡∏≤‡∏° sort ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ *** ‡πÉ‡∏´‡πâ sort ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏û‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÅ‡∏ó‡∏ô
            { $sort: { firstSeen: 1, firstId: 1 } }
        ];

        const rows = await InformationCol.aggregate(pipeline).toArray();

        const items = rows.map((r) => ({
            _id: r.firstId,
            agencyName: r.unit || '',
            code: r.code || '',
            phone: r.phone || '',
            email: r.email || ''
        }));

        res.json(items);
    } catch (err) {
        console.error('GET /api/information/agencies error:', err);
        res.status(500).json({ message: 'server error' });
    }
});


// ===== POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà =====
// ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ 2 ‡πÅ‡∏ñ‡∏ß (type: 'field' ‡πÅ‡∏•‡∏∞ 'equipment') ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏±‡πâ‡∏ô
app.post('/api/information', async (req, res) => {
    try {
        const agency = toStr(req.body.agency || req.body.agencyName).trim();
        const code = toStr(req.body.code).trim();
        const phone = toStr(req.body.phone).trim();
        const email = toStr(req.body.email).trim();

        if (!agency) return res.status(400).json({ message: 'agency (‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô) is required' });

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡πÜ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô type ‡πÉ‡∏î type ‡∏´‡∏ô‡∏∂‡πà‡∏á)
        const exists = await Information.findOne({ unit: new RegExp('^' + agency + '$', 'i') });
        if (exists) {
            // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡∏Å‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏π‡πà type
            // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ return 409 ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            // return res.status(409).json({ message: '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' });
        }

        const baseDoc = { unit: agency, code, phone, email, usage: 0, usageByMonthYear: [] };
        const docs = await Information.insertMany([
            { ...baseDoc, type: 'field', createdAt: new Date() },
            { ...baseDoc, type: 'equipment', createdAt: new Date() }
        ]);

        res.status(201).json({ success: true, items: docs });
    } catch (err) {
        console.error('POST /api/information error:', err);
        res.status(500).json({ message: err.message });
    }
});

// ===== DELETE: ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ (case-insensitive) =====
app.delete('/api/information/agencies/by-name/:name', async (req, res) => {
    try {
        const name = toStr(req.params.name).trim();
        if (!name) return res.status(400).json({ message: 'name is required' });

        const regex = new RegExp('^' + name + '$', 'i');
        const result = await Information.deleteMany({ unit: regex });
        res.json({ success: true, deletedCount: result.deletedCount });
    } catch (err) {
        console.error('DELETE /api/information/agencies/by-name error:', err);
        res.status(500).json({ message: err.message });
    }
});

// ===== DELETE: ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≤‡∏° _id (fallback) =====
app.delete('/api/information/:id', async (req, res) => {
    try {
        const id = req.params.id;
        const result = await Information.deleteOne({ _id: new mongoose.Types.ObjectId(id) });
        if (!result.deletedCount) return res.status(404).json({ message: 'Not found' });
        res.json({ success: true });
    } catch (err) {
        console.error('DELETE /api/information/:id error:', err);
        res.status(500).json({ message: err.message });
    }
});
// ===== PUT: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î (case-insensitive) =====
app.put('/api/information/agencies/by-name/:name', async (req, res) => {
    try {
        const oldName = String(req.params.name || '').trim();
        const newName = String(req.body.agency || req.body.agencyName || req.body.unit || '').trim();
        if (!oldName || !newName) return res.status(400).json({ message: 'old/new name required' });

        const result = await Information.updateMany(
            { unit: new RegExp('^' + oldName + '$', 'i') },
            { $set: { unit: newName, updatedAt: new Date() } }
        );
        res.json({
            success: true,
            matchedCount: result.matchedCount ?? result.n,
            modifiedCount: result.modifiedCount ?? result.nModified
        });
    } catch (e) {
        res.status(500).json({ message: e.message });
    }
});

// ===== PUT: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° _id (fallback) =====
app.put('/api/information/:id', async (req, res) => {
    try {
        const id = req.params.id;
        const newName = String(req.body.agency || req.body.agencyName || req.body.unit || '').trim();
        if (!newName) return res.status(400).json({ message: 'unit (new name) is required' });

        const result = await Information.updateOne(
            { _id: new mongoose.Types.ObjectId(id) },
            { $set: { unit: newName, updatedAt: new Date() } }
        );
        const matched = result.matchedCount ?? result.n ?? 0;
        if (!matched) return res.status(404).json({ message: 'Not found' });
        res.json({ success: true });
    } catch (e) {
        res.status(500).json({ message: e.message });
    }
});

app.get('/api/information', async (req, res) => {
    try {
        const filter = {};
        if (req.query.type) {
            filter.type = req.query.type;
        }
        const infos = await Information.find(filter);
        res.json(infos);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/information/increase-usage', async (req, res) => {
    const { unit } = req.body
    if (!unit) return res.status(400).json({ success: false, message: 'unit required' })
    try {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï usage ‡∏ï‡∏≤‡∏° unit (‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô)
        const info = await Information.findOneAndUpdate(
            { unit },
            { $inc: { usage: 1 } },
            { new: true }
        )
        if (!info) return res.status(404).json({ success: false, message: 'not found' })
        res.json({ success: true, info })
    } catch (err) {
        res.status(500).json({ success: false, message: err.message })
    }
})

app.post('/api/information/aggregate-usage', async (req, res) => {
    try {
        // ‡∏•‡∏ö usageByMonthYear ‡πÄ‡∏î‡∏¥‡∏°
        await Information.updateMany({}, { $set: { usageByMonthYear: [] } });

        // Field
        const fieldHistory = await History.find({ type: 'field', status: 'approved', approvedAt: { $exists: true } });
        const fieldMap = {};
        fieldHistory.forEach(item => {
            if (!item.agency || !item.approvedAt) return;
            const dt = new Date(item.approvedAt);
            const year = dt.getFullYear();
            const month = dt.getMonth() + 1;
            const key = `${item.agency}|field|${year}|${month}`;
            if (!fieldMap[key]) fieldMap[key] = { unit: item.agency, type: 'field', year, month, usage: 0 };
            fieldMap[key].usage += 1;
        });

        // Equipment
        const equipHistory = await History.find({ type: 'equipment', status: 'approved', approvedAt: { $exists: true } });
        const equipMap = {};
        equipHistory.forEach(item => {
            if (!item.agency || !item.approvedAt) return;
            const dt = new Date(item.approvedAt);
            const year = dt.getFullYear();
            const month = dt.getMonth() + 1;
            const key = `${item.agency}|equipment|${year}|${month}`;
            if (!equipMap[key]) equipMap[key] = { unit: item.agency, type: 'equipment', year, month, usage: 0 };
            equipMap[key].usage += 1;
        });

        // ‡∏£‡∏ß‡∏° field/equipment
        const all = [...Object.values(fieldMap), ...Object.values(equipMap)];

        // ‡∏£‡∏ß‡∏° usageByMonthYear ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ type
        const agencyMap = {};
        for (const item of all) {
            const key = `${item.unit}|${item.type}`;
            if (!agencyMap[key]) agencyMap[key] = { unit: item.unit, type: item.type, usageByMonthYear: [] };
            agencyMap[key].usageByMonthYear.push({
                year: item.year,
                month: item.month,
                usage: item.usage
            });
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï usageByMonthYear ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for (const key in agencyMap) {
            const data = agencyMap[key];
            await Information.findOneAndUpdate(
                { unit: data.unit, type: data.type },
                { $set: { usageByMonthYear: data.usageByMonthYear } },
                { upsert: true }
            );
        }

        // ‡∏£‡∏ß‡∏° usage
        for (const info of await Information.find()) {
            let sum = 0;
            if (info.usageByMonthYear && info.usageByMonthYear.length) {
                sum = info.usageByMonthYear.reduce((s, u) => s + u.usage, 0);
            }
            info.usage = sum;
            await info.save();
        }

        res.json({ success: true, message: "Aggregated usageByMonthYear updated." });
    } catch (err) {
        res.status(500).json({ success: false, message: err.message });
    }
});
app.post('/api/booking_equipment_and_history', async (req, res) => {
    try {
        // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á booking ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (BookingEquipment)
        const booking = await BookingEquipment.create(req.body); // booking._id

        // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á history ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (History)
        const newHistory = await History.create({
            user_id: req.body.user_id,
            name: req.body.name,
            quantity: req.body.quantity,
            status: req.body.status,
            date: req.body.since ? req.body.since : new Date(),
            since: req.body.since || '',
            uptodate: req.body.uptodate || '',
            type: 'equipment',
            agency: req.body.agency || '',
            booking_id: booking._id,
            username_form: req.body.username_form || '',
            id_form: req.body.id_form || '',
        });

        // 3. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏à‡∏≤‡∏Å booking.attachedFiles ‡∏°‡∏≤‡πÉ‡∏™‡πà history.attachment
        if (booking.attachedFiles && booking.attachedFiles.length) {
            const attachments = [];
            const fileNames = [];
            const fileTypes = [];
            booking.attachedFiles.forEach(f => {
                attachments.push(f.fileUrl || f.base64 || "");
                fileNames.push(f.originalName || f.fileName || "attachment");
                fileTypes.push(f.mimetype || "application/octet-stream");
            });
            await History.findByIdAndUpdate(newHistory._id, {
                attachment: attachments,
                fileName: fileNames,
                fileType: fileTypes
            });
        }

        res.send({ success: true, booking, history: newHistory });
    } catch (err) {
        res.status(500).send({ success: false, message: err.message });
    }
});
// GET: ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå ‡∏à‡∏≤‡∏Å id ‡∏Ç‡∏≠‡∏á history ‡πÅ‡∏•‡∏∞ index ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô array
app.get('/api/history/:id/file/:idx', async (req, res) => {
    try {
        const historyItem = await History.findById(req.params.id);
        const idx = parseInt(req.params.idx, 10);
        if (!historyItem || !historyItem.attachment || !historyItem.attachment[idx]) {
            return res.status(404).send('File not found');
        }
        const base64Data = historyItem.attachment[idx];
        // ‚≠êÔ∏è ‡πÉ‡∏™‡πà default ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
        const mimeType = (historyItem.fileType && historyItem.fileType[idx]) || historyItem.fileType || 'application/octet-stream';
        const fileName = (historyItem.fileName && historyItem.fileName[idx]) || 'download';

        const fileBuffer = Buffer.from(base64Data, 'base64');
        res.set('Content-Type', mimeType || 'application/octet-stream');
        res.set('Content-Disposition', `attachment; filename="${fileName}"`);
        res.send(fileBuffer);
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// ===== Admin Quick Booking: FIELD =====
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© (pending) ‡∏î‡πâ‡∏ß‡∏¢ booking_id ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)
app.post('/api/history/admin-quick-field', async (req, res) => {
    try {
        const {
            name,            // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°
            zone = '-',      // ‡πÇ‡∏ã‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡πà‡∏á '-')
            agency = '',     // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
            reasons = '',    // ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
            since, uptodate, // YYYY-MM-DD
            startTime, endTime,
            booking_id       // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á ‡∏à‡∏∞ generate ‡πÉ‡∏´‡πâ
        } = req.body || {};

        // ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        if (!name || !since || !uptodate || !startTime || !endTime) {
            return res.status(400).json({ error: 'missing required fields' });
        }

        // ‡∏î‡∏∂‡∏á roles ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô step (‡∏à‡∏≤‡∏Å Settings) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ fallback
        async function getFieldRoles() {
            try {
                const doc1 = await Settings.findOne({ key: 'approval_roles_field' }).lean();
                let roles = [];
                if (Array.isArray(doc1?.value)) roles = doc1.value;
                else if (doc1?.value?.field) roles = doc1.value.field;
                roles = (roles || []).map(r => String(r).toLowerCase());
                const ALLOWED = new Set(['staff', 'admin', 'super']);
                roles = roles.filter(r => ALLOWED.has(r));
                return roles.length ? roles : ['admin', 'super']; // fallback
            } catch {
                return ['admin', 'super'];
            }
        }

        const roles = await getFieldRoles();
        const step = roles.map(r => ({ role: r, approve: null }));

        const finalBookingId = booking_id || `${Date.now()}_${req.user?.user_id || 'admin'}`;

        const doc = await History.create({
            type: 'field',
            status: 'pending',
            name, zone,
            agency,
            reasons,                 // ‚Üê ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            requester: 'Admin Quick Booking',
            user_id: req.user?.user_id || '',

            since: new Date(since),
            uptodate: new Date(uptodate),
            startTime, endTime,

            booking_id: finalBookingId,

            // ‚úÖ ‡∏ò‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FE ‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
            specialAdminQuick: true,
            createdByRole: (req.user?.role || '').toLowerCase(),

            step
        });

        return res.status(201).json({ ok: true, data: doc });
    } catch (e) {
        console.error('[admin-quick-field:create] error', e);
        return res.status(500).json({ ok: false, error: 'failed to create admin-quick booking' });
    }
});

// ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ booking_id (‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô)
// ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô specialAdminQuick = true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏Å‡∏ï‡∏¥
app.delete('/api/history/admin-quick-field/:bookingId', async (req, res) => {
    try {
        const bookingId = String(req.params.bookingId || '').trim();
        if (!bookingId) return res.status(400).json({ ok: false, error: 'missing booking_id' });

        const result = await History.deleteMany({
            type: 'field',
            booking_id: bookingId,
            specialAdminQuick: true
        });

        return res.json({ ok: true, deletedCount: result.deletedCount || 0 });
    } catch (e) {
        console.error('[admin-quick-field:delete] error', e);
        return res.status(500).json({ ok: false, error: 'failed to delete admin-quick booking' });
    }
});

app.post('/api/booking_field_upload', bookingFieldUpload.array('files'), async (req, res) => {
    try {
        const data = req.body;
        // convert files info
        const files = (req.files || []).map(file => ({
            originalName: file.originalname,
            fileName: file.filename,
            fileUrl: `${req.protocol}://${req.get('host')}/uploads/${file.filename}`,
            size: file.size,
            mimetype: file.mimetype
        }));

        const booking = await BookingField.create({
            ...data,
            files, // save files array
            agency: data.agency,
            zone: data.zone,
            // ... add fields as needed
            user_id: data.user_id
        });

        res.json({ bookingId: booking._id });
    } catch (err) {
        res.status(500).json({ success: false, message: err.message });
    }
});


// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å roles ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ step.vue
// ===== Utilities =====
// ===== Allowed roles & cleaners =====
const ALLOWED = new Set(['staff', 'admin', 'super']);

const cleanRoles = (arr) =>
    Array.from(
        new Set(
            (Array.isArray(arr) ? arr : [])
                .map(v => String(v || '').trim().toLowerCase())
                .filter(v => ALLOWED.has(v))
        )
    );

function sanitizeIncomingStep(step) {
    if (!Array.isArray(step)) return [];
    const now = new Date();
    const seen = new Set();
    return step
        .map(x => ({
            role: String(x?.role || '').trim().toLowerCase(),
            approve: (x?.approve === true) ? true : (x?.approve === false ? false : null),
            createdAt: x?.createdAt ? new Date(x.createdAt) : now,
            updatedAt: now,
        }))
        .filter(x => ALLOWED.has(x.role) && !seen.has(x.role) && seen.add(x.role));
}

// ===== Utils: single-day vs multi-day for equipment =====
function isEquipmentMultiDay(body) {
    const s = body?.since || body?.start_date;
    const e = body?.uptodate || body?.end_date;
    if (!s || !e) return false;
    const d1 = new Date(s), d2 = new Date(e);
    return d1.toDateString() !== d2.toDateString();
}

// ===== Get roles for a request type =====
// type: 'field' | 'equipment' | 'equipment_one_day'
async function getRolesFor(type, body = null) {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ key ‡∏ï‡∏≤‡∏° schema ‡πÉ‡∏´‡∏°‡πà (3 ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£)
    const pick = async (key) => {
        const doc = await Settings.findOne({ key }).lean();
        return cleanRoles(doc?.value || []);
    };

    if (type === 'field') {
        return await pick('approval_roles_field');
    }

    if (type === 'equipment_one_day') {
        return await pick('approval_roles_equipment_one_day');
    }

    if (type === 'equipment') {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ body ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô single/multi ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        if (body && !isEquipmentMultiDay(body)) {
            return await pick('approval_roles_equipment_one_day');
        }
        return await pick('approval_roles_equipment');
    }

    return [];
}

/* ================== SETTINGS API ================== */

// ===== POST /api/settings/approval_roles =====
// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (3 ‡∏Ñ‡∏µ‡∏¢‡πå) ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πà‡∏≤ (2 ‡∏Ñ‡∏µ‡∏¢‡πå ‡∏´‡∏£‡∏∑‡∏≠ array ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß)
app.post('/api/settings/approval_roles', async (req, res) => {
    try {
        const body = req.body || {};
        const fromObj = (o, k) => (o && typeof o === 'object' ? o[k] : undefined);

        // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å body ‡∏´‡∏£‡∏∑‡∏≠ body.value (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á)
        let field = cleanRoles(body.field ?? fromObj(body.value, 'field'));
        let equipment = cleanRoles(body.equipment ?? fromObj(body.value, 'equipment'));
        let eqOneDay = cleanRoles(
            body.equipment_one_day
            ?? fromObj(body.value, 'equipment_one_day')
            ?? body.one_day
            ?? fromObj(body.value, 'one_day')
            ?? body.equipmentOneDay
            ?? fromObj(body.value, 'equipmentOneDay')
        );

        // fallback legacy: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏Å‡∏≠‡∏±‡∏ô ‡∏•‡∏≠‡∏á roles/value ‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        if (!field.length && !equipment.length && !eqOneDay.length) {
            const legacyArr = Array.isArray(body.roles) ? body.roles :
                (Array.isArray(body.value) ? body.value : []);
            const cleaned = cleanRoles(legacyArr);
            field = cleaned;
            equipment = cleaned;
            // ‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: one-day ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î default = ['staff'] ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            eqOneDay = []; // ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô: ['staff']
        }

        const now = new Date();
        await Promise.all([
            Settings.updateOne(
                { key: 'approval_roles_field' },
                { $set: { value: field, updatedAt: now }, $setOnInsert: { key: 'approval_roles_field', createdAt: now } },
                { upsert: true }
            ),
            Settings.updateOne(
                { key: 'approval_roles_equipment' },
                { $set: { value: equipment, updatedAt: now }, $setOnInsert: { key: 'approval_roles_equipment', createdAt: now } },
                { upsert: true }
            ),
            Settings.updateOne(
                { key: 'approval_roles_equipment_one_day' },
                { $set: { value: eqOneDay, updatedAt: now }, $setOnInsert: { key: 'approval_roles_equipment_one_day', createdAt: now } },
                { upsert: true }
            ),
        ]);

        return res.json({ message: 'saved', value: { field, equipment, equipment_one_day: eqOneDay } });
    } catch (err) {
        console.error('save approval_roles error:', err);
        return res.status(500).json({ message: 'Failed to save approval roles', error: String(err?.message || err) });
    }
});

// ===== GET /api/settings/approval_roles =====
// ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠ { value: { field:[], equipment:[], equipment_one_day:[] } }
// ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô fallback
app.get('/api/settings/approval_roles', async (req, res) => {
    try {
        // ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (3 ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£) ‡∏Å‡πà‡∏≠‡∏ô
        const [docField, docEquip, docEquip1d] = await Promise.all([
            Settings.findOne({ key: 'approval_roles_field' }).lean(),
            Settings.findOne({ key: 'approval_roles_equipment' }).lean(),
            Settings.findOne({ key: 'approval_roles_equipment_one_day' }).lean(),
        ]);

        let field = Array.isArray(docField?.value) ? docField.value : null;
        let equipment = Array.isArray(docEquip?.value) ? docEquip.value : null;
        let eqOneDay = Array.isArray(docEquip1d?.value) ? docEquip1d.value : null;

        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Üí ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤ key: approval_roles (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ object {field,equipment})
        if (!field || !equipment || !eqOneDay) {
            const legacy = await Settings.findOne({ key: 'approval_roles' }).lean();
            if (legacy?.value) {
                if (Array.isArray(legacy.value)) {
                    field = field ?? legacy.value;
                    equipment = equipment ?? legacy.value;
                    // one-day ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏Å‡πá‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠ default ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                    eqOneDay = eqOneDay ?? [];
                } else if (typeof legacy.value === 'object') {
                    field = field ?? (Array.isArray(legacy.value.field) ? legacy.value.field : []);
                    equipment = equipment ?? (Array.isArray(legacy.value.equipment) ? legacy.value.equipment : []);
                    eqOneDay = eqOneDay ?? (
                        Array.isArray(legacy.value.equipment_one_day) ? legacy.value.equipment_one_day :
                            Array.isArray(legacy.value.one_day) ? legacy.value.one_day :
                                Array.isArray(legacy.value.equipmentOneDay) ? legacy.value.equipmentOneDay :
                                    []
                    );
                }
            }
        }

        // final sanitize
        field = cleanRoles(field || []);
        equipment = cleanRoles(equipment || []);
        eqOneDay = cleanRoles(eqOneDay || []);

        return res.json({ value: { field, equipment, equipment_one_day: eqOneDay } });
    } catch (err) {
        console.error('load approval_roles error:', err);
        return res.status(500).json({ message: 'Failed to load approval roles', error: String(err?.message || err) });
    }
});

// ========== Start server ==========
const PORT = process.env.PORT || 8020;
app.listen(PORT, () => console.log('Backend running on port', PORT));